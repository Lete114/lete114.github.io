{"version":3,"names":["origins","Array","from","Set","location","origin","mimes","isSupportWebp","mimeRegExpString","mime","mimeRegExp","RegExp","slice","handleRequest","url","currentUrl","URL","currentPathname","pathname","find","i","hostname","urls","map","search","webps","test","extname","match","u","webpUrl","replaceUrl","replace","push","fetchAny","concat","createPromiseAny","reverse","promise","Promise","resolve","reject","then","any","iterable","all","controller","AbortController","signal","PromiseAll","async","toString","r","fetch","Response","arrayBuffer","status","headers","statusText","Headers","set","abort","body","self","addEventListener","skipWaiting","clients","claim","event","request","get","includes","local","respond","respondWith","e","console","log"],"sources":["sw.js.map"],"sourcesContent":["const origins = Array.from(\n  new Set([\n    location.origin,\n    'https://blog.imlete.cn',\n    'https://lete114.github.io',\n    'https://raw.gitmirror.com/lete114/lete114.github.io/main',\n    'https://cdn2.chuqis.com/gh/lete114/lete114.github.io@main',\n    'https://githubusercontent.onmicrosoft.cn/lete114/lete114.github.io/main',\n    'https://gh-proxy.com/https://raw.githubusercontent.com/lete114/lete114.github.io/main',\n    'https://gh.api.99988866.xyz/https://raw.githubusercontent.com/lete114/lete114.github.io/main'\n  ])\n)\n\nconst mimes = {\n  '.yml': 'text/yaml',\n  '.html': 'text/html',\n  '.xml': 'application/xml',\n  '.txt': 'text/plain',\n  '.json': 'application/json',\n  '.css': 'text/css',\n  '.gif': 'image/gif',\n  '.webp': 'image/webp',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.js': 'application/javascript',\n  '.svg': 'image/svg+xml',\n  '.ttf': 'font/ttf',\n  '.woff2': 'font/woff2',\n  '.map': 'application/json'\n}\n\nlet isSupportWebp = false\nlet mimeRegExpString = ''\nfor (const mime in mimes) mimeRegExpString += '|' + mime\n// 删除第一个 |\nconst mimeRegExp = new RegExp(`(${mimeRegExpString.slice(1)})$`)\n// 生成正则例子: /(.yml|.html|.xml|.txt|.json|.css|.gif|.png|.jpg|.js|.svg|.ttf|.woff2|.map)$/\n\nself.addEventListener('install', async () => {\n  await self.skipWaiting()\n})\n\nself.addEventListener('activate', async () => {\n  await self.clients.claim()\n})\nself.addEventListener('fetch', async (event) => {\n  isSupportWebp = event.request.headers.get('accept').includes('image/webp')\n  const local = ['localhost', '127.0.0.1']\n  try {\n    if (local.includes(location.hostname)) return\n    const respond = handleRequest(event.request.url)\n    event.respondWith(respond ? respond : fetch(event.request))\n  } catch (e) {\n    console.log('Service Worker Error:', e)\n  }\n})\n\nfunction handleRequest(url) {\n  const currentUrl = new URL(url)\n  const currentPathname = currentUrl.pathname\n\n  // 遍历判断当前请求是否是源站主机\n  const is = origins.find((i) => currentUrl.hostname === new URL(i).hostname)\n\n  // 如果不是源站，则正常请求，否则竞速获取\n  if (!is) return false\n\n  const urls = origins.map((i) => i + currentPathname + currentUrl.search)\n  const webps = []\n  if (isSupportWebp && /.(jpe?g|png|gif)$/.test(currentPathname)) {\n    const extname = currentPathname.match(/.(\\w+)$/)[0]\n    for (const u of urls) {\n      const webpUrl = new URL(u)\n      const replaceUrl = webpUrl.origin + webpUrl.pathname.replace(extname, '.webp') + webpUrl.search\n      webps.push(replaceUrl)\n    }\n  }\n  return fetchAny(webps.concat(urls))\n}\n\n// Promise.any 的 polyfill\ncreatePromiseAny()\nfunction createPromiseAny() {\n  if (!Promise.any) Promise.any = implementation\n\n  // From: https://github.com/m0ppers/promise-any\n  function reverse(promise) {\n    return new Promise((resolve, reject) => Promise.resolve(promise).then(reject, resolve))\n  }\n\n  function implementation(iterable) {\n    return reverse(Promise.all(Array.from(iterable).map(reverse)))\n  }\n}\n\n// 发送所有请求\nfunction fetchAny(urls) {\n  // 中断一个或多个请求\n  const controller = new AbortController()\n  const signal = controller.signal\n\n  // 遍历将所有的请求地址转换为promise\n  const PromiseAll = urls.map(PromiseAllHandler)\n\n  // 谁先返回\"成功状态\"则返回谁的内容，如果都返回\"失败状态\"则返回null\n  return Promise.any(PromiseAll)\n\n  async function PromiseAllHandler(url) {\n    const { pathname } = new URL(url)\n    if (!pathname.match(mimeRegExp)) url = url.replace(/\\/$/, '') + '/index' + '.html'.toString()\n\n    let r = await fetch(url, { signal })\n    r = new Response(await r.arrayBuffer(), { status: r.status, headers: r.headers, statusText: r.statusText })\n\n    // if (r.status === 404) {\n    //   const { origin } = new URL(url)\n    //   const currentOrigin = origins.find((i) => origin === new URL(i).origin)\n    //   r = await handleRequest(new URL(currentOrigin).origin + '/404.html')\n    // }\n    if (r.status !== 200) return\n    const headers = new Headers(r.headers)\n\n    const match = new URL(url).pathname.match(mimeRegExp)\n    if (match) {\n      headers.set('content-type', mimes[match[0]])\n    } else {\n      headers.set('content-type', mimes['.html'])\n    }\n    controller.abort()\n    return new Response(r.body, {\n      headers: headers,\n      status: r.status,\n      statusText: r.statusText\n    })\n\n    // return new Promise(async (resolve, reject) => {\n\n    //// await\n    //   const { pathname } = new URL(url)\n    //   if (!pathname.match(mimeRegExp)) url = url.replace(/\\/$/, '') + '/index.html'\n\n    //   let r = await fetch(url, { signal })\n    //   r = new Response(await r.arrayBuffer(), { status: r.status, headers: r.headers, statusText: r.statusText })\n    //   if (r.status === 404) {\n    //     let currentOrigin = new URL(url)\n    //     currentOrigin = origin.find((i) => currentOrigin.origin === new URL(i).origin)\n    //     r = await fetch(currentOrigin + '/404.html')\n    //   }\n    //   if (r.status !== 200) reject()\n    //   const headers = new Headers(r.headers)\n\n    //   const match = new URL(url).pathname.match(mimeRegExp)\n    //   if (match) {\n    //     headers.set('content-type', mimes[match[0]])\n    //   } else {\n    //     headers.set('content-type', mimes['.html'])\n    //   }\n    //   resolve(\n    //     new Response(r.body, {\n    //       headers: headers,\n    //       status: r.status,\n    //       statusText: r.statusText\n    //     })\n    //   )\n    //   controller.abort()\n\n    //// 链式调用\n    // const { pathname } = new URL(url)\n    // if (!pathname.match(mimeRegExp)) url = url.replace(/\\/$/, '') + '/index.html'\n\n    // return fetch(url, { signal })\n    //   .then(async (res) => new Response(await res.arrayBuffer(), { status: res.status, headers: res.headers, statusText: res.statusText }))\n    //   .then(async (r) => {\n    //     if (r.status === 404) {\n    //       let currentOrigin = new URL(url)\n    //       currentOrigin = origin.find((i) => currentOrigin.origin === new URL(i).origin)\n    //       r = await (await fetch(currentOrigin + '/404.html')).clone()\n    //     }\n    //     if (r.status !== 200) reject()\n\n    //     const headers = new Headers(r.headers)\n\n    //     const match = new URL(url).pathname.match(mimeRegExp)\n    //     if (match) {\n    //       headers.set('content-type', mimes[match[0]])\n    //     } else {\n    //       headers.set('content-type', mimes['.html'])\n    //     }\n    //     controller.abort()\n    //     resolve(\n    //       new Response(r.body, {\n    //         headers: headers,\n    //         status: r.status,\n    //         statusText: r.statusText\n    //       })\n    //     )\n    //   })\n\n    // })\n  }\n}\n"],"mappings":"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"}