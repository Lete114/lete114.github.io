{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lete乐特 's Blog • All posts by \"git\" tag",
    "description": "我相信我可以，但我一直在路上，所以我有无限的可能！！",
    "home_page_url": "https://blog.imlete.cn",
    "items": [
        {
            "id": "https://blog.imlete.cn/article/Use-lint-staged.html",
            "url": "https://blog.imlete.cn/article/Use-lint-staged.html",
            "title": "使用 Lint-staged 校验 Git 暂存区代码是否符合标准",
            "date_published": "2022-04-12T16:57:17.000Z",
            "content_html": "<h2 id=\"什么是-Lint-staged\"><a href=\"#什么是-Lint-staged\" class=\"headerlink\" title=\"什么是 Lint-staged\"></a>什么是 Lint-staged</h2><p>在 Git 暂存区执行相关的操作，如对暂存区进行<code>eslint</code>或是<code>prettier</code>，也可以自定义一些脚本</p>\n<p>官方写着很有趣的一段话:</p>\n<blockquote>\n<p>Run linters against staged git files and don’t let 💩 slip into your code base!<br>对暂存区进行代码校验，不要让 💩(便便)溜进你的代码库！</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>有些人可能会问，我都有<code>eslint</code>和<code>prettier</code>为什么还要用<code>lint-staged</code>?</p>\n<blockquote>\n<p>简而言之: <code>lint-staged</code>只对已修改的或是将要提交到仓库的文件进行校验</p>\n</blockquote>\n<p>因为<code>lint-staged</code>仅对暂存区的文件进行校验，而<code>eslint</code>和<code>prettier</code>则是全局或是指定某个目录下的的所有文件进行校验，在执行效率上肯定是<code>lint-staged</code>更胜一筹</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lint-staged -D</span><br></pre></td></tr></table></figure>\n\n<p>编辑<code>package.json</code>文件</p>\n<blockquote>\n<p>如果同时校验<code>.vue</code>则可以这么写<code>&quot;*.&#123;js,vue&#125;&quot;: &quot;npx eslint --fix&quot;</code><br>其内部使用的匹配规则是<a href=\"https://github.com/micromatch/micromatch\">micromatch</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx eslint --fix&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完整<code>package.json</code>文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;study-notes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx husky install&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@commitlint/cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^16.2.3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@commitlint/config-conventional&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^16.2.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.13.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.0.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^12.3.7&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commitlint&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@commitlint/config-conventional&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx eslint --fix&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置好后，当你执行<code>git add .</code>后就可以使用<code>npx lint-staged</code>命令来校验暂存区的代码文件了</p>\n<p>有些人可能会说，这么麻烦，那我还不如直接在<code>git add .</code>之前使用<code>npx eslint --fix .</code>这也不是更好吗？</p>\n<p>文章开头一句说了，<code>lint-staged</code>只对暂存区的代码文件进行 lint，执行效率远超<code>npx eslint --fix .</code>命令，该命令会对全局的文件进行校验，不过有没有问题都要校验一遍(如果项目很大，那么这个差距就显现了)</p>\n<p>如果一个项目有<code>几百</code>或<code>上千</code>个文件，而我只是修改了一个文件，比如说一个标点符号或者是其它修改，那么<code>npx eslint --fix .</code>可能需要校验很久，而使用<code>npx lint-staged</code>则只需要校验这个文件即可</p>\n<h3 id=\"配合-Husky-使用\"><a href=\"#配合-Husky-使用\" class=\"headerlink\" title=\"配合 Husky 使用\"></a>配合 Husky 使用</h3><p>关于如何使用 husky 可以参考这篇文章: <a href=\"/article/Use-husky-manage-git-project.html\">使用 Husky(哈士奇)管理 Git 项目</a></p>\n<p>添加 hook 后执行<code>git commit</code>之前就会对暂存区的文件进行校验了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&#x27;npx lint-staged&#x27;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Commitlint-lint-commit-messages.html",
            "url": "https://blog.imlete.cn/article/Commitlint-lint-commit-messages.html",
            "title": "使用 commitlint 来检查提交的信息是否符合规范",
            "date_published": "2022-04-12T15:39:56.000Z",
            "content_html": "<h2 id=\"什么是-commitlint\"><a href=\"#什么是-commitlint\" class=\"headerlink\" title=\"什么是 commitlint\"></a>什么是 commitlint</h2><p>commitlint 用来校验你提交的信息是否符合规范，它和<code>commitizen</code>很类似，它们都做一件事，那就是让你提交的信息更规范</p>\n<h2 id=\"commitlint-和-commitizen-的区别\"><a href=\"#commitlint-和-commitizen-的区别\" class=\"headerlink\" title=\"commitlint 和 commitizen 的区别\"></a>commitlint 和 commitizen 的区别</h2><blockquote>\n<p>commitlint: 校验 git commit 信息是否符合规范(就像 eslint 一样)</p>\n</blockquote>\n<blockquote>\n<p>commitizen: 辅助 git commit 信息更加规范(就像代码提示一样)</p>\n</blockquote>\n<p>所以你可以把它们两个结合起来使用效果更佳哦~</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure>\n\n<p>创建配置文件，可以手动创建，也可以使用命令创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br></pre></td></tr></table></figure>\n\n<p>然后就会生成<code>commitlint.config.js</code>文件，其中包含<code>module.exports = &#123;extends: [&#39;@commitlint/config-conventional&#39;]&#125;</code>代码</p>\n<blockquote>\n<p>这个配置也可以写在<code>package.json</code>文件中</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;study-notes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;husky install&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@commitlint/cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^16.2.3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@commitlint/config-conventional&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^16.2.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.0.4&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commitlint&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@commitlint/config-conventional&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配合commitizen使用\"><a href=\"#配合commitizen使用\" class=\"headerlink\" title=\"配合commitizen使用\"></a>配合commitizen使用</h2><blockquote>\n<p>配合 commitizen 可以参考这篇文章: <a href=\"/article/Normalizing-git-commit-messages.html\">使用commitizen规范化git提交信息</a></p>\n</blockquote>\n<h2 id=\"配合husky使用\"><a href=\"#配合husky使用\" class=\"headerlink\" title=\"配合husky使用\"></a>配合husky使用</h2><p>关于如何使用husky可以参考这篇文章: <a href=\"/article/Use-husky-manage-git-project.html\">使用Husky(哈士奇)管理Git项目</a></p>\n<p>添加hook</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/commit-msg <span class=\"string\">&#x27;npx --no -- commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 因为有些命令行不支持上面这条命令</span></span><br><span class=\"line\"><span class=\"comment\"># 如果上面这条对你的项目不管用，可以试试以下其它命令</span></span><br><span class=\"line\">npx husky add .husky/commit-msg \\&quot;npx --no -- commitlint --edit <span class=\"string\">&#x27;$1&#x27;</span>\\&quot;</span><br><span class=\"line\"><span class=\"comment\"># 或者</span></span><br><span class=\"line\">npx husky add .husky/commit-msg <span class=\"string\">&quot;npx --no -- commitlint --edit <span class=\"variable\">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>不符合规范的提交信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">⧗   input: abc</span><br><span class=\"line\">✖   subject may not be empty [subject-empty]</span><br><span class=\"line\">✖   <span class=\"built_in\">type</span> may not be empty [type-empty]</span><br><span class=\"line\"></span><br><span class=\"line\">✖   found 2 problems, 0 warnings</span><br><span class=\"line\">ⓘ   Get <span class=\"built_in\">help</span>: https://github.com/conventional-changelog/commitlint/<span class=\"comment\">#what-is-commitlint</span></span><br><span class=\"line\"></span><br><span class=\"line\">husky - commit-msg hook exited with code 1 (error)</span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Use-husky-manage-git-project.html",
            "url": "https://blog.imlete.cn/article/Use-husky-manage-git-project.html",
            "title": "使用Husky(哈士奇)管理Git项目",
            "date_published": "2022-04-12T14:16:02.000Z",
            "content_html": "<h2 id=\"什么是-Husky-哈士奇\"><a href=\"#什么是-Husky-哈士奇\" class=\"headerlink\" title=\"什么是 Husky(哈士奇)\"></a>什么是 Husky(哈士奇)</h2><p>Husky 就是狗，没错就是拆家的那家伙，也不知道<a href=\"https://github.com/typicode\">@typicode</a>是怎么想的，尽然起了这么<strong>有趣</strong>的一个项目名字</p>\n<p>Husky 可以方便快速的使用<code>Git hooks</code>，帮你简单的配置项目，同时 Husky 可以将<code>Git hooks</code>同步到仓库，让整个团队能使用相同的<code>Git hooks</code></p>\n<h2 id=\"什么是-Git-Hooks\"><a href=\"#什么是-Git-Hooks\" class=\"headerlink\" title=\"什么是 Git Hooks\"></a>什么是 Git Hooks</h2><blockquote>\n<p>文档说明中文: <a href=\"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90\">https://git-scm.com/book/zh/v2/自定义-Git-Git-钩子</a><br>文档说明英文: <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks\">https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks</a></p>\n</blockquote>\n<p>因为提交到仓库后<code>.git</code>文件是不存在仓库中的，而<code>Git hooks</code>却在<code>.git/hooks</code>目录下</p>\n<p>现在假设你是项目组长，一些项目需要使用的技术和库，需要你来配置，然后让小组成员去使用，那么当你使用了<code>Git hooks</code>后，只有你本地这台电脑能使用<code>Git hooks</code>，其它人<strong>Clone(克隆)</strong>或<strong>Pull(拉取)</strong>，都不会得到你配置的<code>Git hooks</code>，这时就可以使用<code>Husky</code>来同步<code>Git hooks</code></p>\n<h2 id=\"安装-Husky\"><a href=\"#安装-Husky\" class=\"headerlink\" title=\"安装 Husky\"></a>安装 Husky</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install husky -D</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为什么使用<code>prepare</code>当作 key？<br>因为<code>prepare</code>是 npm 的生命周期命令，它会在<code>npm install</code>完成后执行，所以当如果有人克隆了项目并执行了<code>npm install</code>后就会自动初始化 husky 来管理 hook</p>\n</blockquote>\n<p>编辑<code>package.json</code>的<code>scripts</code>并并运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm set-script prepare <span class=\"string\">&quot;npx husky install&quot;</span></span><br><span class=\"line\">npm run prepare</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>npm set-script</code>命令仅限 npm 版本是 7.x 版本以上，如果不是则需要手动编辑</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;study-notes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;husky install&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.0.4&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加-hook\"><a href=\"#添加-hook\" class=\"headerlink\" title=\"添加 hook\"></a>添加 hook</h2><p>举例：如果在进行 git commit 之前对代码进行<code>eslint</code>检查，那么可以使用<code>pre-commit</code>(这仅仅是个例子，你可以灵活的使用 hook 完成一些你想要完成的事情)</p>\n<p>关于<code>pre-commit</code>的说明可以在官方文档查阅或是直接打开<code>.git\\hooks\\pre-commit.sample</code>查看注释说明</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&quot;npx eslint --fix&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>当你执行<code>git commit -m &quot;xxx&quot;</code>提交代码之前就会自动执行 eslint</p>\n<p>例如添加 hook 让他在提交代码前执行<code>package.json</code>中的 test 脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&quot;npm test&quot;</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;test husky pre-commit&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>test 脚本输出一段内容 <strong>“Error: no test specified”</strong> 后还行了<code>exit 1</code>结束命令如下，由于执行了<code>exit 1</code>结束了命令(相当于我们按了ctrl+c一样)所以并未提交</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;test husky pre-commit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; study-notes@1.0.0 <span class=\"built_in\">test</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Error: no test specified&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;Error: no test specified&quot;</span></span><br><span class=\"line\">husky - pre-commit hook exited with code 1 (error)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Normalizing-git-commit-messages.html",
            "url": "https://blog.imlete.cn/article/Normalizing-git-commit-messages.html",
            "title": "使用commitizen规范化git提交信息",
            "date_published": "2022-04-03T17:08:59.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>如果你足够细心观察的化，你会发现哪些<strong>大型项目</strong>他们的<code>git comment</code>信息是有规律，且非常规范的</p>\n<p>例如 Vue 项目仓库<br>他们都是经过规定的<strong>格式</strong>以及<strong>类型</strong>和一些规范进行提交的<br><img src=\"/img/Normalizing-git-commit-messages/Vue-Repo.png\" alt=\"Vue Repo\"></p>\n<p>那么这真的是认为一个一个的编写吗？<br>答: 当然不是，每一个项目都有不同的格式、类型、规范标准，如果是中小型项目可以直接使用普通默认的标准，但大型项目他们都会自定义一些标准供团队所有人去遵循，显然它是需要一款工具来进行管理这些标准的</p>\n<h2 id=\"commitizen\"><a href=\"#commitizen\" class=\"headerlink\" title=\"commitizen\"></a>commitizen</h2><blockquote>\n<p>配合 commitlint 可以参考这篇文章: <a href=\"/article/Commitlint-lint-commit-messages.html\">使用 commitlint 来检查提交的信息是否符合规范</a></p>\n</blockquote>\n<p><a href=\"https://github.com/commitizen/cz-cli\">commitizen</a> 是一个 cli 工具，它可以用于规范化 git commit 信息，可以代替 git commit 命令</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install -g commitizen cz-conventional-changelog</span><br><span class=\"line\"><span class=\"comment\"># 然后在系统根目录创建一个配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27;</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure>\n\n<p>用法: 你可以使用<code>git cz</code>或<code>cz</code>来代替<code>git commit</code>，你也可以使用<code>git-cz</code>，它是<code>cz</code>的别名(一般直接使用 git cz 就可以了)</p>\n<p>当你使用<code>git cz</code>时系统会提示你填写必填的字段，并且你的提交消息将根据项目维护者定义的标准进行格式化<br><img src=\"/img/Normalizing-git-commit-messages/git-cz.png\" alt=\"Git cz\"></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>接下来就是将传统的<code>git add .</code>—&gt;<code>git commit -m&quot;xxx&quot;</code>—&gt;<code>git push</code>替换为<code>git add .</code>—&gt;<code>git cz</code>—&gt;<code>git push</code>就可以了，根据提示填写相关<strong>commit</strong>标准即可(会用翻译吧？会自己查阅文档和看仓库 README 吧？)</p>\n<blockquote>\n<p>如果使用的是本地安装 <code>git add .</code>—&gt;<code>npx cz</code>—&gt;<code>git push</code></p>\n</blockquote>\n<p>以上基本上已经足够使用了，若想更深入的了解和自定义使用，可以自己查看文档</p>\n<blockquote>\n<p>我觉得不因该写的特别细，能够满足基本的使用条件即可，只需要了解了使用方法后，需要自己实践、摸索、思考。这样才能把知识牢记于心，这才是真正的学会了</p>\n</blockquote>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/git-tag-release-distinction.html",
            "url": "https://blog.imlete.cn/article/git-tag-release-distinction.html",
            "title": "git中tag与release的创建以及两者的区别",
            "date_published": "2022-04-03T15:54:38.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文未经过<strong>原文作者转载许可</strong>，全由博主一人擅自抄录到本博客，博主只是觉得原文作者写的很好，所以将其收录到自己的博客内，以便博主本人日后对该知识有所遗忘时，能在自己的博客内自行查阅，再此感谢<strong>原文作者</strong>写的这篇好文。如有侵权，请联系删除</p>\n<blockquote>\n<p>本文可能于原文有所不同，不过版权依然归<strong>原文作者</strong>所有</p>\n</blockquote>\n<blockquote>\n<p>原文地址: <a href=\"https://www.jianshu.com/p/79ecf4fe5079\">https://www.jianshu.com/p/79ecf4fe5079</a></p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>标签（tag）是特定提交（commit)一个指针，也就是每个 tag 对应一个特定的 commit。</p>\n<p>Release 是具有 changelogs 和二进制文件的一级对象，它可以代表超出 Git 架构本身的一个特定时间点之前的所有项目历史。也就是通过 release，不但能够通过源码体现出项目历史，还能通过已经编译好的二进制文件来进一步描述此时的项目状态。“超出 Git 架构本身“的意思则在于，git 本身只能记录项目修改，本质上不适合将编译好的项目二进制文件记录下来。而通过 release 则把项目二进制文件保存了下来，方便用户下载，也方便查找特定版本的二进制文件。</p>\n<p>以下是<a href=\"https://github.com/blog/1547-release-your-software\">Github official announcement</a>所定义原文：</p>\n<blockquote>\n<p>eleases are first-class objects with changelogs and binary assets that present a full project history beyond Git artifacts.</p>\n</blockquote>\n<h2 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h2><p>Release 分为两种：lightweight and annotated.</p>\n<p>创建 lightweight 类型的 tag：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.4-lw</span><br></pre></td></tr></table></figure>\n\n<p>创建 annotated 类型的 tag：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.4 -m <span class=\"string\">&quot;my version 1.4&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 tag 可以返回到项目的特定状态下，所以可以将 tag 看作是在大量 commit 中设定的书签。</p>\n<p>创建 release，则需要通过源码托管商的网页操作界面来进行，一般会要求填写 tag 名、分支以及相应的发布说明，还可上传编译好的程序、打包好的文件等。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>标签是 git 中的概念，而 release 则是 Github、码云等源码托管商所提供的更高层的概念。也就是说 git 本身是没有 release 这个概念的，只有 tag。</p>\n<p>两者之间的关系则是，release 基于 tag，为 tag 添加更丰富的信息，一般是编译好的文件。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Release 是源码托管商对 git 的 tag 功能的增强。通过 git 提供的 tag 功能，我们可以给项目进行版本标识，以识别特定的版本，如<code>v0.1.0</code>、<code>v1.0.0</code>等。而通过源码托管商提供的 release 功能，在 tag 的基础上我们可以添加编译好的二进制文件等，如<code>.deb</code>、<code>.exe</code>等给特定的版本提供更多的信息，方便用户，也方便后期查找特定版本的程序。</p>\n",
            "tags": [
                "记录",
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/git-clean-all-comment.html",
            "url": "https://blog.imlete.cn/article/git-clean-all-comment.html",
            "title": "git清空所有comment记录(含远程仓库)",
            "date_published": "2021-09-01T19:09:57.000Z",
            "content_html": "<p>当你再开发的时候，新建了一个仓库进行版本控制，每天晚上都会把当天完成内容push到仓库<br>可到准备发布时，你不想让别人看到你的烂代码<br>你可能会选择重命名仓库，然后再新建仓库，从而得到之前仓库的昵称，你也可能会选择全部清空所有提交记录<br>本篇内容主要记录一下清空仓库的所有提交记录</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p><strong>创建orphan分支</strong></p>\n<blockquote>\n<p>关于orphan分支是什么，可以直接去官网看更详细的说明<br>orphan: 创建一个一个无提交记录的分支，如果只是创建了分支，而未有任何提交记录，其实它并没有创建</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan <span class=\"built_in\">test</span> <span class=\"comment\"># 分支名自定义</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>添加所有文件到暂存区</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n\n<p><strong>提交到本地仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m<span class=\"string\">&#x27;commit message&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>删除原本的分支(master)</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D master</span><br></pre></td></tr></table></figure>\n\n<p><strong>重命名当前分支</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m master</span><br></pre></td></tr></table></figure>\n\n<p><strong>push到远程仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master --force</span><br><span class=\"line\"><span class=\"comment\">## 这里要使用强行提交，因为你本地的提交记录和远程仓库的不一致，无法匹配被拒绝push</span></span><br><span class=\"line\"><span class=\"comment\">## --force 可以无视这一点，直接覆盖远程仓库</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "记录",
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Git-Multiple-Accounts-Switch.html",
            "url": "https://blog.imlete.cn/article/Git-Multiple-Accounts-Switch.html",
            "title": "Git一台电脑多账号切换使用",
            "date_published": "2021-03-30T19:51:06.000Z",
            "content_html": "<p>最近多注册了一个Github账号，专门用于fork其他优秀项目的<a href=\"https://github.com/lete-fork\">lete-fork</a><br>难免会在本地push一些代码上去，但Git有个毛病，它切换账户起来是非常麻烦的，各种上网查资料，和网友的咨询后，总结出了这篇文章内容<br>参考: <a href=\"https://blog.csdn.net/lqlqlq007/article/details/80613272\">https://blog.csdn.net/lqlqlq007/article/details/80613272</a></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><blockquote>\n<p>这里建议使用ssh方式，千万不要使用https方式，之前我非常喜欢使用https方式clone和push、pull，每次操作都要输入用户名密码(其实我觉得者并没有什么烦的，直到最近我使用了lete-fork账号push的时候，需要切换账号，还要修改<code>git config --gloabl user.name &quot;xxxx&quot;</code>和<code>git config --gloabl user.email &quot;xxxx&quot;</code>后我才知道，https是真的麻烦，其实就是我不想配置ssh)</p>\n</blockquote>\n<p>我现在有两个Github账号分别是<code>lete114</code>和<code>lete-fork</code></p>\n<p>我现在的全局用户是lete114，可使用<code>git config --list</code>进行查看<code>user.name</code>和<code>user.email</code>项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --list <span class=\"comment\">## 执行了该命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff.astextplain.textconv=astextplain</span><br><span class=\"line\">filter.lfs.clean=git-lfs clean -- %f</span><br><span class=\"line\">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class=\"line\">filter.lfs.process=git-lfs filter-process</span><br><span class=\"line\">filter.lfs.required=<span class=\"literal\">true</span></span><br><span class=\"line\">http.sslbackend=openssl</span><br><span class=\"line\">http.sslcainfo=G:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class=\"line\">core.autocrlf=<span class=\"literal\">true</span></span><br><span class=\"line\">core.fscache=<span class=\"literal\">true</span></span><br><span class=\"line\">core.symlinks=<span class=\"literal\">false</span></span><br><span class=\"line\">credential.helper=manager</span><br><span class=\"line\">filter.lfs.clean=git-lfs clean -- %f</span><br><span class=\"line\">filter.lfs.smudge=git-lfs smudge -- %f</span><br><span class=\"line\">filter.lfs.process=git-lfs filter-process</span><br><span class=\"line\">filter.lfs.required=<span class=\"literal\">true</span></span><br><span class=\"line\">user.name=lete114 <span class=\"comment\"># 全局的用户名</span></span><br><span class=\"line\">user.email=lete@lete114.top <span class=\"comment\"># 全局的邮箱</span></span><br><span class=\"line\">http.version=HTTP/1.1</span><br><span class=\"line\">http.postbuffer=524288000</span><br><span class=\"line\">http.sslverify=<span class=\"literal\">false</span></span><br><span class=\"line\">credential.helper=store</span><br><span class=\"line\">core.quotepath=<span class=\"literal\">false</span></span><br><span class=\"line\">core.repositoryformatversion=0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改当前项目账户\"><a href=\"#修改当前项目账户\" class=\"headerlink\" title=\"修改当前项目账户\"></a>修改当前项目账户</h3><p>此时我所在的项目是lete-fork的，我修改了部分代码，并想上传到远程仓库(我肯定要切换到lete-fork账户再进行提交)<br>由于我上面的全局账户是lete114，那么我所有的git操作都是使用的lete114账户进行的，这时我得使用lete-fork账户进行操作(仅当前项目)</p>\n<blockquote>\n<p>此处声明一下<code>--global</code>的作用,global表示全局，如果写了–global的话就会修改全局账户，此处我只需使用lete-fork账户进行push操作，所以无需使用全局(一般全局账户都是自己的大号)</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">######### 此处命令不要使用，只是演示说明--global的作用，请执行下方代码块的命令 #########</span></span><br><span class=\"line\"><span class=\"comment\"># 设置当前项目的账户用户名是lete-fork</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;lete-fork&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置当前项目的账户邮箱是lete-fork绑定的邮箱</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;lete0429@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<p>只需以下命令进行局部账户修改(需要执行的命令是如下命令，并非上方代码块)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置当前项目的账户用户名是lete-fork</span></span><br><span class=\"line\">git config user.name <span class=\"string\">&quot;lete-fork&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置当前项目的账户邮箱是lete-fork绑定的邮箱</span></span><br><span class=\"line\">git config user.email <span class=\"string\">&quot;lete0429@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<p>打开当前目录下的<code>.git/config</code>文件可用看出下方的<code>[user]</code>多了name和email</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[core]</span><br><span class=\"line\">\trepositoryformatversion = 0</span><br><span class=\"line\">\tfilemode = false</span><br><span class=\"line\">\tbare = false</span><br><span class=\"line\">\tlogallrefupdates = true</span><br><span class=\"line\">\tsymlinks = false</span><br><span class=\"line\">\tignorecase = true</span><br><span class=\"line\">[remote &quot;origin&quot;]</span><br><span class=\"line\">\turl = git@github.com:lete-fork/test-push.git</span><br><span class=\"line\">\tfetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class=\"line\">[branch &quot;master&quot;]</span><br><span class=\"line\">\tremote = origin</span><br><span class=\"line\">\tmerge = refs/heads/master</span><br><span class=\"line\">[user]</span><br><span class=\"line\">\tname = lete-fork</span><br><span class=\"line\">\temail = lete0429@gmail.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置lete114账户的SSH\"><a href=\"#配置lete114账户的SSH\" class=\"headerlink\" title=\"配置lete114账户的SSH\"></a>配置lete114账户的SSH</h3><p>此步骤是配置lete114账户的SSH<br>生成SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;你的邮箱&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#ssh-keygen -t rsa -C &quot;lete@lete114.top&quot;</span></span><br></pre></td></tr></table></figure>\n<p>执行命令后需要进行3次或4次确认：</p>\n<ol>\n<li>确认秘钥的保存路径(如果不需要改路径则直接回车)</li>\n<li>如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖(如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖)</li>\n<li>创建密码(如果不需要密码则直接回车)</li>\n<li>确认密码</li>\n</ol>\n<p>此处我是一路回车，并没有设置什么，此后默认生成路径是<code>C:/Users/你电脑的当前用户名/.ssh</code>(需要开启显示隐藏目录)<br>.ssh目录下生成两个文件名为<code>id_rsa</code>和<code>id_rsa.pub</code></p>\n<p>复制id_rsa.pub文件里的全部内容，打开GitHub的账户设置(非仓库设置)<br>GitHub账户设置：<a href=\"https://github.com/settings/keys\">https://github.com/settings/keys</a><br>然后点击<code>New SSH Key</code>按钮添加SSH配置，其中<code>Title</code>你可用自定义<code>Key</code>是刚刚复制id_rsa.pub文件里的全部内容，完成后点击<code>Add SSH Key</code>即可</p>\n<p>克隆仓库是使用SSH方式，初次使用SSH方式会出现<code>The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.</code>根据提示输入yes即可(随后<code>C:/Users/你电脑的当前用户名/.ssh</code>目录下会多出<code>known_hosts</code>文件)</p>\n<h3 id=\"配置lete-fork账户的SSH\"><a href=\"#配置lete-fork账户的SSH\" class=\"headerlink\" title=\"配置lete-fork账户的SSH\"></a>配置lete-fork账户的SSH</h3><p>在<code>C:/Users/你电脑的当前用户名/.ssh</code>目录下打开<code>Git Bash Here</code><br>生成SSH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;你的邮箱&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#ssh-keygen -t rsa -C &quot;lete0429@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>\n<p>同上方lete114账户生成类似，但我这里要提醒一句，这次不能一路回车了<br>显示<code>Enter file in which to save the key (/c/Users/Lete/.ssh/id_rsa):</code>时就不要一路回车了，这路你需要重新起一个名字<br>为了区分我在后面追加了一个fork即<code>id_rsa_fork</code>(为了不和lete114账户冲突，此处建议规范，同我的命名方式一样在<code>id_rsa</code>后面追加<code>_xxx_xxx</code>命名法)，随后就可用一路回车了</p>\n<p>生成后同上方lete114账户一样在账户设置里添加<code>id_rsa_fork.pub</code>里的全部内容到SSH Key</p>\n<h3 id=\"账户切换\"><a href=\"#账户切换\" class=\"headerlink\" title=\"账户切换\"></a>账户切换</h3><p>默认使用的是<code>id_rsa</code>的SSH也就是lete114的SSH，切换需要使用命令切换到<code>id_rsa_fork</code>(lete-fork账户)<br>可以使用以下命令查看当前<code>Git Bash Here</code>使用的是哪个账户的SSH<br>(注意：如果你在其他Git Bash Here里切换了SSH账户，当前的Git Bash Here是不会跟着切换的，也就是说你每次打开一个新的Git Bash Here就必须切换，否则默认就是<code>id_rsa</code>(lete114账户))</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行上方命令后会输出</span></span><br><span class=\"line\"><span class=\"comment\">## Hi lete114! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以下命令可以新增秘钥(注意秘钥地址要换成你要切换用户对应的秘钥地址)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 切换到 id_rsa_fork (lete-fork账户SSH)</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_fork</span><br></pre></td></tr></table></figure>\n\n<p>上方命令执行后你可能会发现输出了这句话<code>Could not open a connection to your authentication agent.</code><br>则先执行这个命令<code>ssh-agent bash</code>再执行切换账户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent bash</span><br><span class=\"line\"><span class=\"comment\">## 切换到 id_rsa_fork (lete-fork账户SSH)</span></span><br><span class=\"line\">ssh-add ~/.ssh/id_rsa_fork</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行上方命令后会输出</span></span><br><span class=\"line\"><span class=\"comment\">## Identity added: /c/Users/Lete/.ssh/id_rsa_fork (lete0429@gmail.com)</span></span><br></pre></td></tr></table></figure>\n\n<p>再次输入<code>ssh -T git@github.com</code>查看当前使用的是哪个账户</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 执行上方命令后会输出</span></span><br><span class=\"line\"><span class=\"comment\">## Hi lete-fork! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>再次提醒：如果你现在已经切换到lete-fork账户了，关闭了Git Bash Here后重新打开Git Bash Here则会变为lete114账户.</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Git-Pull.html",
            "url": "https://blog.imlete.cn/article/Git-Pull.html",
            "title": "Git Pull 拉取的用法",
            "date_published": "2021-02-05T16:08:01.000Z",
            "content_html": "<p>最近写<a href=\"https://github.com/lete114/hexo-theme-MengD\">Hexo-MengD(萌典)</a>主题老出现bug不得不使用这些Git指令<br>而且这些命令不常用，记不住，就记录一下</p>\n<blockquote>\n<p>其他于Git命令相关的文章</p>\n<ol>\n<li><a href=\"/article/Git-Merging.html\">Git 解决 (master|MERGING)</a></li>\n<li><a href=\"/article/Git-Push-Reset.html\">Git撤回Push到远程的代码</a></li>\n<li><a href=\"/article/Git-Merge.html\">Git分支合并(dev合并到master)</a></li>\n</ol>\n</blockquote>\n<p>写法(其中<code>&lt;&gt;</code>只是为了标识)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master:master</span><br></pre></td></tr></table></figure>\n<p>将远程主机origin的master分支拉取下来，与本地的master分支合并。<br>后面的冒号可以省略(这种写法不推荐，为避免不必要的麻烦，还是补齐比较好)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Git-Merge.html",
            "url": "https://blog.imlete.cn/article/Git-Merge.html",
            "title": "Git分支合并(dev合并到master)",
            "date_published": "2021-02-05T16:07:22.000Z",
            "content_html": "<p>最近写<a href=\"https://github.com/lete114/hexo-theme-MengD\">Hexo-MengD(萌典)</a>主题老出现bug不得不使用这些Git指令<br>而且这些命令不常用，记不住，就记录一下</p>\n<blockquote>\n<p>其他于Git命令相关的文章</p>\n<ol>\n<li><a href=\"/article/Git-Merging.html\">Git 解决 (master|MERGING)</a></li>\n<li><a href=\"/article/Git-Push-Reset.html\">Git撤回Push到远程的代码</a></li>\n<li><a href=\"/article/Git-Pull.html\">Git Pull 拉取的用法</a></li>\n</ol>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>当我们在<code>dev</code>分支中完成了项目的开发与测试，测试无bug后执行了如下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m<span class=\"string\">&#x27;提交代码&#x27;</span></span><br><span class=\"line\">git push origin dev</span><br></pre></td></tr></table></figure>\n\n<p>那么如何将开发完成的代码合并到主分支(master)呢？</p>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><ol>\n<li>切换到主分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure></li>\n<li>如果你的项目是多人开发的话需要先<code>git pull</code>拉去代码，如果不是很了解的话上面我已推荐相关文章<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master:master</span><br></pre></td></tr></table></figure>\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。(不过我建议还是写全比较好，有可能会多出一些莫名其妙得问题)</li>\n<li>将dev分支得代码合并到主分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge dev</span><br></pre></td></tr></table></figure>\n你可以执行<code>git status</code>查看状态，会得到如下提示(你的分支比<code>origin/master</code>分支早提交了1次)<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is ahead of <span class=\"string\">&#x27;origin/master&#x27;</span> by 1 commits.</span><br><span class=\"line\">  (use <span class=\"string\">&quot;git push&quot;</span> to publish your <span class=\"built_in\">local</span> commits)</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li>\n<li>确认状态正常后执行push操作<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Git-Push-Reset.html",
            "url": "https://blog.imlete.cn/article/Git-Push-Reset.html",
            "title": "Git撤回Push到远程的代码",
            "date_published": "2021-02-05T16:06:56.000Z",
            "content_html": "<p>最近写<a href=\"https://github.com/lete114/hexo-theme-MengD\">Hexo-MengD(萌典)</a>主题老出现bug不得不使用这些Git指令<br>而且这些命令不常用，记不住，就记录一下</p>\n<blockquote>\n<p>其他于Git命令相关的文章</p>\n<ol>\n<li><a href=\"/article/Git-Merging.html\">Git 解决 (master|MERGING)</a></li>\n<li><a href=\"/article/Git-Merge.html\">Git分支合并(dev合并到master)</a></li>\n<li><a href=\"/article/Git-Pull.html\">Git Pull 拉取的用法</a></li>\n</ol>\n</blockquote>\n<p>当我们已经把代码push到远程仓库后，突然发现了bug，这时候我们就需要代码回滚了</p>\n<p>执行<code>git log</code>命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lete@Lete MINGW64 /d/Lete/GitHub/Hexo-Blog (blog)</span><br><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit 2f05bec11245b8b9b2355efc2abdfa9a8396db29 (HEAD -&gt; blog, origin/blog)</span><br><span class=\"line\">Author: lete114 &lt;lete@lete114.top&gt;</span><br><span class=\"line\">Date:   Thu Feb 4 21:13:33 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    更新主题，修复部署时间长的bug</span><br><span class=\"line\"></span><br><span class=\"line\">commit a4ba2439ce6bdb7f6190b84579a88519ed555694</span><br><span class=\"line\">Author: lete114 &lt;lete@lete114.top&gt;</span><br><span class=\"line\">Date:   Thu Feb 4 20:23:35 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    主题更新</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 下面还有就展示了</span></span><br></pre></td></tr></table></figure>\n<p>其中<code>commit 2f05bec11245b8b9b2355efc2abdfa9a8396db29 (HEAD -&gt; blog, origin/blog)</code>是当前提交的最新代码<br>往下<code>commit a4ba2439ce6bdb7f6190b84579a88519ed555694</code>就是之前或更早前提交的代码<br>选取其中commit后面的版本号<code>a4ba2439ce6bdb7f6190b84579a88519ed555694</code>执行如下命令即可回滚到<code>主题更新</code>这个版本了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft a4ba2439ce6bdb7f6190b84579a88519ed555694</span><br></pre></td></tr></table></figure>\n\n<p>这时由于本地的代码已回滚，已经和远程仓库代码版本不一致了，就得强制push才能推送(这个操作就完成了远程仓库代码的回滚了)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master --force</span><br></pre></td></tr></table></figure>",
            "tags": [
                "Git"
            ]
        }
    ]
}