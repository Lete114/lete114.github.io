{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lete乐特 's Blog • All posts by \"javascript\" tag",
    "description": "我相信我可以，但我一直在路上，所以我有无限的可能！！",
    "home_page_url": "https://blog.imlete.cn",
    "items": [
        {
            "id": "https://blog.imlete.cn/article/Virtual-DOM-slower-real-DOM.html",
            "url": "https://blog.imlete.cn/article/Virtual-DOM-slower-real-DOM.html",
            "title": "虚拟 DOM 比真 DOM 烂",
            "date_published": "2023-10-17T20:00:29.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在开始之前，说明一下为什么写这篇文章吧。虚拟 DOM（本文后面统一 <code>vDOM</code>），这个词经常在面试、社区文章中出现，都在说 vDOM 快、至于快在哪里也没个人能说的清楚（当然，我也不一定是对的，主要是分享自己对 vDOM 和 DOM 的看法），从网上看到的资料我能了解到的就是使用 JavaScript 的普通对象<code>抽象</code>出一个 vDOM 树，当数据变化的时候重新生成 vDOM 树，再通过 <code>diif</code> 算法比较<code>新</code> vDOM 和<code>旧</code>的 vDOM 对比，看看是哪块的数据变动了，最后将变动的地方<code>映射</code>到 DOM 上，从而完成页面数据的展示。那么问题就来了，既然最后都要修改 DOM 为什么还要弄出一个 vDOM 呢？吃饱了没事干？还遍历对比新旧 vDOM 的差异，饶了一圈不还是要改 DOM 吗？我陷入了沉思…..</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>什么是 vDOM 我就不多说了，基于<code>前言</code>最后一句话的思考，我更想了解 vDOM 它究竟带来什么优点，前端巨头 Vue、React 都在用，这究竟是为什么？？</p>\n<p>于是我打开了 Vue 的官网 <a href=\"https://web.archive.org/web/20231017125349/https://cn.vuejs.org/guide/extras/rendering-mechanism\">Virtual DOM</a>，并未在文档长看到有任何地方描述 vDOM 效率高、速度快、内存占用低。</p>\n<p>再来看看 React 官网 <a href=\"https://web.archive.org/web/20231017131640/https://zh-hans.legacy.reactjs.org/docs/faq-internals.html\">Virtual DOM - 中文</a> <a href=\"https://web.archive.org/web/20231017131401/https://legacy.reactjs.org/docs/faq-internals.html\">Virtual DOM - 英语</a>，和 Vue 一样，并未提起 vDOM 效率高、速度快、内存占用低等字眼。其中有一句话：在 React 的世界里，术语 “Virtual DOM” 通常与 React 元素关联在一起，因为它们都是代表了<code>用户界面的对象</code>。</p>\n<p>因此 vDOM 并不是在提高效率，而是在消耗效率。为什么这么说？因为同样是前端框架，后起之秀 <a href=\"https://svelte.dev\">Svelte.js</a> 和 <a href=\"https://www.solidjs.com\">Solid.js</a> 都没有使用 vDOM 反而效率还吊打 Vue.js 和 React.js ，效率甚至直逼 Vanilla.js (原生 JS)</p>\n<h3 id=\"为什么需要虚拟-DOM\"><a href=\"#为什么需要虚拟-DOM\" class=\"headerlink\" title=\"为什么需要虚拟 DOM\"></a>为什么需要虚拟 DOM</h3><p>那么问题来了，为什么需要 vDOM，vDOM 效率不是比 DOM 低吗？为什么还要用？整那么多判断和数据对比，最后不还是要改 DOM 吗？为什么不直接改 DOM？</p>\n<p>我们先想想 vDOM 究竟带来了什么优势。</p>\n<ol>\n<li><p>跨平台：借助一些工具可以将 vDOM <code>转换</code>成对应平台可以认识的东西<br>例如在浏览器中 react 就需要 react-dom 这个库在实现将 vDOM 转换成真实 DOM。<br>还有 react-native 将 vDOM 转换成 <code>Android</code> 和 <code>iOS</code> 平台可以使用的用户界面。<br><br>再举个 🌰，国内 uniApp 很多前端开发多多少少都听过吧？做小程序，或 APP 的，它使用 Vue vDOM 转换成对应平台、iOS、Android、小程序(微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝)</p>\n</li>\n<li><p>简单方便: 能让你轻松的操作 DOM，也不用你去维护 DOM 的状态。<br>不像浏览器中的 DOM 每次都要 document.querySelector，甚至还要判断获取的这个真实 DOM 到底存不存在，这样写代码就非常的恶心</p>\n</li>\n<li><p>性能提升: 不是说 vDOM 性能比不上 DOM 吗？为什么还说它性能提升？<br>在某些情况下，vDOM 性能确实是要比 DOM 性能好，如果有 1000 个 DOM 节点（举例 ul&gt;li），这是后端返回的数据，需要渲染到页面上（一般人谁没事后端返回你那么多数据干嘛，更何况你也不能一次性渲染那么多数据啊，用户又看不到那么多，基本上都是做分页处理），假如有某种业务需求，修改了 100 个 li 接下来看看 vDOM 和 DOM 是怎么运行的吧<br><br>vDOM 生成一个新的 vDOM 跟旧的 vDOM 对比，发现有 100 个 li 数据发生了变化，这时 vDOM 开始修改 DOM ，这个过程中只触发一次 DOM 修改<br><br>DOM 可能也会和 vDOM 一样最后只触发一次 DOM 修改，也可能触发 100 次左右的 DOM 修改，具体看代码是怎么实现</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ul = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> li = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">    li.<span class=\"property\">textContent</span> = i</span><br><span class=\"line\">    <span class=\"comment\">// 关键点</span></span><br><span class=\"line\">    <span class=\"comment\">// 每次给 ul 的子元素都添加一个 li，就排版一次，100次循环结束后排版了100次，也绘制渲染了100次</span></span><br><span class=\"line\">    <span class=\"comment\">// 不知道我这样说是不是对的，因为我对浏览器渲染原理也不是很了解。重排、重绘</span></span><br><span class=\"line\">    ul.<span class=\"title function_\">appendChild</span>(li)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\">!(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ul = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fragment = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createDocumentFragment</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> li = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">    li.<span class=\"property\">textContent</span> = i</span><br><span class=\"line\">    <span class=\"comment\">// 关键点</span></span><br><span class=\"line\">    <span class=\"comment\">// 每次给文档碎片里添加一个 li 这只是在内存中，并没有添加到页面上，所以页面并会不会发生什么变化</span></span><br><span class=\"line\">    fragment.<span class=\"title function_\">appendChild</span>(li)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 直到循环完毕后，将文档碎片里的所有 li 一次性添加到 ul 里，此时页面只触发一次重排、重绘</span></span><br><span class=\"line\">  ul.<span class=\"title function_\">appendChild</span>(fragment)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文仅仅是乐特对 vDOM 的理解和感悟，并未真正的去翻看文中提到的框架源码，所以我希望大家看完这篇文章后能够有一些自己的看法和理解，并自己行动去寻找自己的答案，而不是在网上看到别人写的文章就真的以为别人说的就是对的，从而丧失自己的判断里。就像网上发的短视频，未知事情真伪，仅仅是看到了别人裁剪视频的一小部分，就在评论区跟风</p>\n<p>总结(这才是真正的总结)，vDOM 并没有提高效率，反而是在降低效率，继续上面所说的 1000 个 DOM 节点，如果我只修改了 1 个 li 呢？vDOM 还是会生成一个新的 vDOM 和旧的 vDOM 对比，白白跑了 1000 次</p>\n<p>如果有哪写的不对的，还请各位大佬指出 😁😁</p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/nonuse-es6+-implements-call-apply-bind.html",
            "url": "https://blog.imlete.cn/article/nonuse-es6+-implements-call-apply-bind.html",
            "title": "不使用 ES6+ 实现 call apply bind 方法",
            "date_published": "2022-11-04T15:24:31.000Z",
            "content_html": "<p>使用 ES6+ 实现这三个方法其实非常简单，本文就来挑战一下，如果不适用 ES6+ 的情况下如何实现这三个方法</p>\n<blockquote>\n<p>难点: 不能使用扩展运算符(…)该如何接收参数和传入参数</p>\n</blockquote>\n<p>至于这三个方法有什么区别可以阅读我之前的这篇文章 <a href=\"/article/call-apply-bind-distinction.html\">call()-apply()-bind()方法有什么不同？</a></p>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><p>就不多说废话了，直接看代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">_this, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    _this = _this || <span class=\"variable language_\">window</span></span><br><span class=\"line\">    _this[<span class=\"string\">&#x27;#function#&#x27;</span>] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _this[<span class=\"string\">&#x27;#function#&#x27;</span>]()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> params = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(args)</span><br><span class=\"line\">      <span class=\"comment\">// 当 JSON.stringify 把一个数组解析成字符串是会多套一层 ‘[]’ ，所以需要裁切掉</span></span><br><span class=\"line\">      params = params.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, params.<span class=\"property\">length</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 由于 Function 无法访问上级作用域，由于上层以及裁掉了首尾部分</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以得到 _this[&quot;#function#&quot;](1,2) 这样就能实现扩展运算符(...)的操作了，关于 new Function 请自行查阅</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;_this&#x27;</span>, <span class=\"string\">&#x27;return _this[&quot;#function#&quot;](&#x27;</span> + params + <span class=\"string\">&#x27;)&#x27;</span>)(_this)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// ------ 上面这坨你也可以改为 eval() ------</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> params = []</span><br><span class=\"line\">      <span class=\"comment\">// 注意，这里的 i 初始值是 1 主要目的是为了去除第一个参数(也就是 _this)</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        params.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;arguments[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 这里解释一下，当引用类型与字符串拼接的时候会隐式调用 toString() ，数组调用 toString() 会返回如下结果</span></span><br><span class=\"line\">      <span class=\"comment\">// _this[&quot;#function#&quot;](arguments[1],arguments[2],arguments[3])</span></span><br><span class=\"line\">      <span class=\"comment\">// eval 执行后可以访问上级作用域的变量，这里就可以实现扩展运算符(...)的操作了</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;_this[&quot;#function#&quot;](&#x27;</span> + params + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> _this[<span class=\"string\">&#x27;#function#&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><p>由于前面以及实现了 <code>myApply</code> 方法，再 <code>myCall</code> 即可直接调用，如果要完整写一个 <code>myCall</code> 也只是增加代码冗余而已</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">_this</span>) &#123;</span><br><span class=\"line\">  _this = _this || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = []</span><br><span class=\"line\">  <span class=\"comment\">// 注意，这里的 i 初始值是 1 主要目的是为了去除第一个参数(也就是 _this)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    params.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">myApply</span>(_this, params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>如上，可以继续复用已经封装好的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">_this</span>) &#123;</span><br><span class=\"line\">  _this = _this || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = []</span><br><span class=\"line\">  <span class=\"comment\">// 注意，这里的 i 初始值是 1 主要目的是为了去除第一个参数(也就是 _this)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    params.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意这里的 i 初始值是 0 ,因为它不需要移除 _this ，可能这有点乱，希望读者多多思考</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      params.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.<span class=\"title function_\">myApply</span>(_this, params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是本文的全部内容，可能会存在一些小瑕疵，希望各位读者留言评论或优化</p>\n",
            "tags": [
                "记录",
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/webpack-on-demand-loading-principle.html",
            "url": "https://blog.imlete.cn/article/webpack-on-demand-loading-principle.html",
            "title": "webpack 按需加载原理",
            "date_published": "2022-10-15T10:45:51.000Z",
            "content_html": "<blockquote>\n<p>本文不会带你去阅读 <code>build</code> 后的源码，而是告诉你它是怎么做到的，原理是什么，怎么实现，如何自己动手做一个按需加载模块，如果不想听本文 BB，可直接一步到页脚，获取完整代码 <a href=\"#完整的按需加载代码\">#完整的按需加载代码</a></p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>如果你想阅读源码，你可以根据下面的结构去创建，然后自己打包阅读源码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> mode = <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  mode,</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">chunkFilename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">libraryTarget</span>: <span class=\"string\">&#x27;umd&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/test.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"string\">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当调用 window 的 init 方法时触发加载 test.js ，加载完成后输出结果</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">init</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">import</span>(<span class=\"comment\">/* webpackChunkName: &quot;test&quot; */</span> <span class=\"string\">&#x27;./test&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"import-干了什么\"><a href=\"#import-干了什么\" class=\"headerlink\" title=\"import() 干了什么\"></a>import() 干了什么</h2><p>其实 webpack 就是把 <code>import()</code> 动态导入的模块打包成了一个文件，而其中的 <code>webpackChunkName</code> 注释就是定义打包后这个动态模块的 js 文件，上方指定命名为 <code>test</code>，则打包结果为 <code>test.js</code>,如果没有写 <code>webpackChunkName</code> 那么 webpack 会自动定义随机的文件名(当然这不是随机的，它是根据文件中的内容进行 hash 推算的，只要内容没变，他就一直是这个名字，这段感兴趣的可以自己去阅读源码)</p>\n<h2 id=\"如何获取-url\"><a href=\"#如何获取-url\" class=\"headerlink\" title=\"如何获取 url\"></a>如何获取 url</h2><p>我在没看打包结果的源码时，我是这样想的，既然要加载，那么一定是通过 <code>script</code> 标签<br>因为引入是多变的，比如通过本地引入，或是 cdn 引入，又或者是其它方式，而 webpack 它是无法判断引入方式的，那么该如何获取 js 文件的 url 地址呢？</p>\n<p>拦截请求：<br>不过 <code>script</code> 发出的请求是浏览器发送的，并不像 <code>xhr</code> 一样可以包装一层进行 hook 拦截<br>于是我又想到了 <code>Service Workers</code> 的 <code>fetch</code> 事件，不过 webpack 怎么可能干这种事，这就属于入侵式修改了，不合理</p>\n<p>思来想去，我实在是想不到有啥办法了，于是我就去看了源码，万万没想到啊，居然是用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/currentScript\">document.currentScript</a> 属性，我居然把这给忘了:(</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前 script 标签的 src 属性</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>.<span class=\"property\">src</span></span><br></pre></td></tr></table></figure>\n\n<p>webpack 源码里还写了一个获取当前 script 标签的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取到所有的 script 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> scripts = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 如果有，这通过下表获取</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (scripts.<span class=\"property\">length</span>) scriptUrl = scripts[scripts.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">src</span></span><br></pre></td></tr></table></figure>\n\n<p>原理是什么呢？，大家都知道，html 是从上往下解析的，当解析到 script 标签时，浏览器会阻塞页面渲染，等待下载完当前 js 并执行完成后才会继续往下解析，(除非你给当前 script 标签使用了 <code>async</code> 或 <code>defer</code> 属性，至于这俩属性的作用，可自行网上搜索)这时使用 <code>document.getElementsByTagName(&#39;script&#39;)</code> 获取页面上的 script 标签则只会获取到已经解析的 script 标签，所以当前的 script 标签它一定是最后一个 script 标签，就可以通过 <code>length - 1</code> 获取啦</p>\n<p>既然得到了 url，那么就可以加载 js 了，只需要把当前的 js 文件名改成需要加载的 js 文件名，也就是前面所说的 <code>webpackChunkName</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> scriptUrl</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>) scriptUrl = <span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>.<span class=\"property\">src</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!scriptUrl) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> scripts = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scripts.<span class=\"property\">length</span>) scriptUrl = scripts[scripts.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">src</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!scriptUrl) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Automatic publicPath is not supported in this browser&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 结果以下几个 replace() 即可得到 url</span></span><br><span class=\"line\">scriptUrl = scriptUrl</span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/#.*$/</span>, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 去除锚点</span></span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\?.*$/</span>, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 去除参数</span></span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\/[^/]+$/</span>, <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"comment\">// 去除文件名</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何加载\"><a href=\"#如何加载\" class=\"headerlink\" title=\"如何加载\"></a>如何加载</h2><p>因为在上一步我们已经得到 url，此时只需要拼接上 <code>webpackChunkName</code> 的文件名就可以加载指定的 js 了</p>\n<p>那么<code>webpackChunkName</code>是怎么来的呢？<br>如果你用的是 webpack，那么它已经帮你做好了，反之则得自己写，其实很简单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个对象，里面写好动态加载的js文件名即可</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = &#123; <span class=\"attr\">admin</span>: <span class=\"string\">&#x27;discuss.admin.js&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过 js 动态创建 script 标签加载 js 即可，最后加上一个 <code>onload</code> 事件，等待加载成功后自行代码即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chunk: js 文件名</span></span><br><span class=\"line\"><span class=\"comment\">// callback: 回调函数，当js加载完成后执行</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">loadScript</span> = (<span class=\"params\">chunk, callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = scriptUrl + map[chunk]</span><br><span class=\"line\">  script.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行完成后及时释放，让系统回收内存，毕竟我们只需要加载一次即可</span></span><br><span class=\"line\">    script.<span class=\"property\">onload</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 删掉动态加载的 script 标签 dom 元素(不会对程序照成影响)</span></span><br><span class=\"line\">    script.<span class=\"property\">parentNode</span> &amp;&amp; script.<span class=\"property\">parentNode</span>.<span class=\"title function_\">removeChild</span>(script)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后还有一个问题需要解决，那就是避免在多次执行<code>window.init()</code>时触发多次加载，导致多次请求，照成不必要的请求，以及浪费流量带宽</p>\n<p>既然已经加载，那么就留个标记，表示这个 url 已经加载过了，下载执行不要不要继续创建 script 标签即可</p>\n<p>定义一个数组用来储存已经加载过的动态 js，<code>const chunks = []</code> 在动态创建 script 标签之前将文件名<code>push()</code>进去数组里即可</p>\n<h2 id=\"完整的按需加载代码\"><a href=\"#完整的按需加载代码\" class=\"headerlink\" title=\"完整的按需加载代码\"></a>完整的按需加载代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// source: https://github.com/discussjs/discuss/blob/dc345810e6696f1282fca65df039b2186b1f34d1/src/client/lib/import.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> scriptUrl</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>) scriptUrl = <span class=\"variable language_\">document</span>.<span class=\"property\">currentScript</span>.<span class=\"property\">src</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!scriptUrl) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> scripts = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scripts.<span class=\"property\">length</span>) scriptUrl = scripts[scripts.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"property\">src</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!scriptUrl) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Automatic publicPath is not supported in this browser&#x27;</span>)</span><br><span class=\"line\">scriptUrl = scriptUrl</span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/#.*$/</span>, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 去除锚点</span></span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\?.*$/</span>, <span class=\"string\">&#x27;&#x27;</span>) <span class=\"comment\">// 去除参数</span></span><br><span class=\"line\">  .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\/[^/]+$/</span>, <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"comment\">// 去除文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 未来避免于其它js产生全局变量冲突，你可以定义为一个其它比较复杂的变量名</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">chunks</span> = []</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = &#123; <span class=\"attr\">admin</span>: <span class=\"string\">&#x27;discuss.admin.js&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">loadScript</span> = (<span class=\"params\">chunk, callback</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在，则直接执行回调</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">chunks</span>.<span class=\"title function_\">includes</span>(chunk)) <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 如果上方判断没有成立，则push到数组里，下次执行就会立即执行回调不必再向下执行代码</span></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">chunks</span>.<span class=\"title function_\">push</span>(chunk)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = scriptUrl + map[chunk]</span><br><span class=\"line\">  script.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    script.<span class=\"property\">onload</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>()</span><br><span class=\"line\">    script.<span class=\"property\">parentNode</span> &amp;&amp; script.<span class=\"property\">parentNode</span>.<span class=\"title function_\">removeChild</span>(script)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> loadScript</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "教程"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/CardLink.html",
            "url": "https://blog.imlete.cn/article/CardLink.html",
            "title": "使用 CardLink 库生产卡片式链接",
            "date_published": "2022-07-11T09:52:21.000Z",
            "content_html": "<script async src=\"/js/cardlink.js\" ></script>\n\n<p>有时候经常看到知乎的文章，或者问题中的链接是卡片式的</p>\n<p>将卡片式链接与普通的链接相比，卡片式链接不仅美观，还展示更多信息，如：标题、图片、网址等</p>\n<p>效果如下 <a href=\"https://github.com/Lete114/CardLink\">CardLink</a></p>\n<h2 id=\"CardLink\"><a href=\"#CardLink\" class=\"headerlink\" title=\"CardLink\"></a>CardLink</h2><p>一些使用方法请见 <a href=\"https://github.com/Lete114/CardLink\">https://github.com/Lete114/CardLink</a></p>\n<p>通过 CDN 的方式引入 CardLink</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 建议放在head标签里 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/cardlink&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 建议放在 &lt;/body&gt; 之前 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 为&lt;article&gt;&lt;/article&gt;(文章)标签下所有打开新标签窗口的a标签生成卡片链接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">cardLink</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;article a[target=_blank]&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当你想让特定的链接变成卡片式链接时你可以为它添加上 <code>cardlink</code> 属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 建议放在 &lt;/body&gt; 之前 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// CardLink 默认会对页面上所有a[cardlink]生成卡片链接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">cardLink</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者如果你使用 <code>markdown</code> 写内容的时候，可以直接在内容中写 <code>HTML</code></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">## 标题 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">其它内容...</span><br><span class=\"line\"></span><br><span class=\"line\">正常 markdown 语法</span><br><span class=\"line\">[<span class=\"string\">https://Lete114.github.io/CardLink</span>](<span class=\"link\">https://Lete114.github.io/CardLink</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">html 语法</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://Lete114.github.io/CardLink/&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## 标题 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">其它内容...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 建议放在 &lt;/body&gt; 之前 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// CardLink 默认会对页面上所有a[cardlink]生成卡片链接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">cardLink</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"跨域请求\"><a href=\"#跨域请求\" class=\"headerlink\" title=\"跨域请求\"></a>跨域请求</h3><ol>\n<li>搭建代理服务器，将目标链接传给代理服务器，让代理服务器去请求 HTML 文本并返回<br><a href=\"https://github.com/Lete114/CardLink/tree/server\">CardLink-Server</a></li>\n<li>使用在线免费的跨域代理<br>(前者是博主自己搭建的跨域请求服务，后者是网上找的免费跨域请求服务)<br><code>https://api.allorigins.win/raw?url=</code></li>\n</ol>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/build-ts-doc.html",
            "url": "https://blog.imlete.cn/article/build-ts-doc.html",
            "title": "如何为自己的js项目生成API文档",
            "date_published": "2022-06-06T15:52:50.000Z",
            "content_html": "<p>如题，当自己写完了一个第三方库，准备发布时，总不能直接把一些使用方法以及传参说明写在<code>README.md</code>里吧</p>\n<p>看到许多第三方库都有一个<code>.d.ts</code>文件，当我们使用这些第三方库时，在方法上安装<code>ctrl+鼠标左键</code>时就会跳转到对应<code>.d.ts</code>说明文档中</p>\n<p>那么这个是咱们做的呢？难道是手动创建并编写的吗？不是吧？如果是手动创建的话，哪些大型项目那么多方法和文件模块，并且还是多人协作开发，不可能同步如此庞大的<code>.d.ts</code>文件，那么这个是怎么做的呢？</p>\n<p>这个是使用<code>TypeScript</code>生成的，不是吧？那我用的不是<code>TypeScript</code>写的库不就不能生成了？</p>\n<p>非也非也，即使不是用<code>TypeScript</code>写的项目也能生成<code>.d.ts</code>文件</p>\n<p>只要你写的时候在方法上添加注释即可，注释关键字必须遵循<a href=\"https://jsdoc.app/\">JSDoc</a></p>\n<p>JSDoc 中有很多关键字，这些关键字想必你多多少少会在其它第三方库的<code>.d.ts</code>文件中见过，如: <code>@param</code> <code>@returns</code> <code>@author</code>等，更多具体的请自行在<a href=\"https://jsdoc.app/\">JSDoc</a>中查看</p>\n<p>说了那么多，那么到底如何生成<code>.d.ts</code>文档呢？</p>\n<p>举例我目前有一个<code>/src/main.js</code>，其中代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代码来源于: https://github.com/Lete114/CardLink/blob/f4ab08b78625244d9515743e41c7e04f839e149f/src/main.js#L12</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if it is a [&#x27;https://&#x27;, &#x27;http://&#x27;, &#x27;//&#x27;] protocol</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; url Website url</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isHttp</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(https?:)?\\/\\//g</span>.<span class=\"title function_\">test</span>(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只需一行命令即可，使用 npx 临时安装<code>typescript</code>，并调用<code>typescript</code>的命令生成<code>.d.ts</code>文档</p>\n<blockquote>\n<p>注意其中<code>-p</code>是 npx 的命令，原名<code>--package</code>，具体请看官网<a href=\"https://docs.npmjs.com/cli/v8/commands/npx\">https://docs.npmjs.com/cli/v8/commands/npx</a></p>\n</blockquote>\n<ul>\n<li><code>src/**/*.js</code>: 对 src 目录下的所有 js 文件生成<code>.d.ts</code>文件</li>\n<li><code>--declaration</code>: 生成相应的<code>.d.ts</code>文件</li>\n<li><code>--allowJs</code>: 允许编译 javascript 文件</li>\n<li><code>--emitDeclarationOnly</code>: 只输出 <code>.d.ts</code> 文件，不输出 JavaScript 文件</li>\n<li><code>--outDir</code>: 输出到指定的目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx -p typescript tsc src/**.js --declaration --allowJs --emitDeclarationOnly --outDir types</span><br></pre></td></tr></table></figure>\n\n<p>执行如上命令后就会先下载<code>typescript</code>，然后执行 tsc 命令，构建生成<code>.d.ts</code> 文件到<code>types/main.d.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代码来源于: https://github.com/Lete114/CardLink/blob/f4ab08b78625244d9515743e41c7e04f839e149f/src/main.js#L12</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if it is a [&#x27;https://&#x27;, &#x27;http://&#x27;, &#x27;//&#x27;] protocol</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; url Website url</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isHttp</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "TypeScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Static-resource-cache-control.html",
            "url": "https://blog.imlete.cn/article/Static-resource-cache-control.html",
            "title": "前端优化之静态资源缓存控制",
            "date_published": "2022-05-12T11:51:45.000Z",
            "content_html": "<blockquote>\n<p>本文转自<a href=\"https://www.zhihu.com/question/20790576/answer/32602154\">@张云龙</a>，于 2014 年 10 月在知乎上的一个问题回答，博主觉得这位大佬写的很好，也很详细，于是就把内容搬到了自己的博客上，便于以后自己查阅</p>\n</blockquote>\n<h2 id=\"太长不想看\"><a href=\"#太长不想看\" class=\"headerlink\" title=\"太长不想看\"></a>太长不想看</h2><p>使用强制缓存如何，如何让用户能够及时使用最新修改后的静态资源？</p>\n<ol>\n<li>修改资源文件名<code>index-v1.css</code></li>\n<li>修改资源文件名，并且对文件内容生成 hash 值(内容改变，则 hash 改变反之不改变)(<code>index.v1tg6l.css</code>)</li>\n<li>为资源添加请求参数(该参数没有任何作用，只是为了修改 url 地址)与第二条一样生成 hash(<code>index.css?v=qb6l0p</code>)</li>\n</ol>\n<blockquote>\n<p>总结: 只要修改了资源请求的 url 地址，那么就会获取最新修改的静态资源，从而主动弃用旧静态资源<br>很多大网站都会使用这种方式，例如 baidu，taobao</p>\n</blockquote>\n<h2 id=\"什么是-HTTP-缓存\"><a href=\"#什么是-HTTP-缓存\" class=\"headerlink\" title=\"什么是 HTTP 缓存\"></a>什么是 HTTP 缓存</h2><p>HTTP 缓存分为两种(本文不会深究响应头的众多参数)</p>\n<ul>\n<li>强制缓存: (状态码始终 200)在规定时间内，不用向服务器发送请求，直接使用本地缓存(超过规定时间后才会重新向服务器发送请求获取资源)</li>\n<li>协商缓存: (状态码过期 200，未过期 304)每次都会向服务器确认，这个本地资源有没有过期，过期: 服务器返回新资源。未过期: 让浏览器使用本地缓存</li>\n</ul>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>使用强制缓存如何，如何让用户能够及时使用最新修改后的静态资源？</p>\n<p>这是一个普通网站的结构<br><img src=\"/img/Static-resource-cache-control/1.png\" alt=\"\"></p>\n<p>访问这个网站，可以看到网络请求状态，响应状态 200，这是在正常不过的事了<br>那就看看<code>a.css</code>的请求吧，如果每次用户访问页面都要加载，是不是很影响性能，很浪费带宽啊<br><img src=\"/img/Static-resource-cache-control/2.png\" alt=\"\"></p>\n<p>我们希望最好这样,利用 304，让浏览器使用本地缓存。但，这样就够了吗？不成！<strong>304 叫协商缓存</strong>，这玩意儿还是需要向浏览器发送一个请求，问问服务器这个资源有没有更新</p>\n<blockquote>\n<p>更新: 返回新资源<br>没更新: 告诉浏览器使用本地缓存</p>\n</blockquote>\n<p><img src=\"/img/Static-resource-cache-control/3.png\" alt=\"\"></p>\n<p>使用<strong>强制缓存（cache-control/expires）</strong>让浏览器不要向服务器发送请求了<br>所以必须彻底灭掉这个请求，变成这样<br><img src=\"/img/Static-resource-cache-control/4.png\" alt=\"\"></p>\n<p>那问题来了：这都不让浏览器发资源请求了，这缓存咋更新？<br>可以通过更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源<br><img src=\"/img/Static-resource-cache-control/5.png\" alt=\"\"></p>\n<p>下次上线资源的时候，把链接地址改成新的版本，这就能更新资源了<br><img src=\"/img/Static-resource-cache-control/6.png\" alt=\"\"></p>\n<p>页面引用了 3 个 css，而某次上线只改了其中的 a.css，如果所有链接都更新版本(当然你如果只改 a 的链接地址就可以了，不过我们还是要继续讨论后续问题)，就会导致 b.css，c.css 的缓存也失效，那岂不是又有浪费了？！<br>要解决这种问题，必须让 url 的修改与文件内容关联，也就是说，只有文件内容变化，才会导致相应 url 的变更，从而实现文件级别的精确缓存控制。</p>\n<p>可以使用<strong>数据摘要算法</strong>，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了</p>\n<p>这回再有文件修改，就只更新那个文件对应的 url 了，想到这里貌似很完美了<br><img src=\"/img/Static-resource-cache-control/7.png\" alt=\"\"></p>\n<p>现代互联网企业，为了进一步提升网站性能，会把静态资源和动态网页分集群部署，静态资源会被部署到 CDN 节点上，网页中引用的资源也会变成对应的部署路径<br><img src=\"/img/Static-resource-cache-control/8.png\" alt=\"\"></p>\n<p>好了，当我要更新静态资源的时候，同时也会更新 html 中的引用吧，就好像这样<br><img src=\"/img/Static-resource-cache-control/9.png\" alt=\"\"></p>\n<p>但是这会产生一个问题，如何保证页面与资源保持一致呢？</p>\n<ul>\n<li>先部署页面，再部署资源<ul>\n<li>在二者部署的时间间隔内，如果有用户访问页面，就会在新的页面结构中加载旧的资源，并且把这个旧版本的资源当做新版本缓存起来，其结果就是：用户访问到了一个样式错乱的页面，除非手动刷新，否则在资源缓存过期之前，页面会一直执行错误。</li>\n</ul>\n</li>\n<li>先部署资源，再部署页面<ul>\n<li>在部署时间间隔之内，有旧版本资源本地缓存的用户访问网站，由于请求的页面是旧版本的，资源引用没有改变，浏览器将直接使用本地缓存，这种情况下页面展现正常；但没有本地缓存或者缓存过期的用户访问网站，就会出现旧版本页面加载新版本资源的情况，导致页面执行错误，但当页面完成部署，这部分用户再次访问页面又会恢复正常了。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>简而言之: 先部署谁都不成！都会导致部署过程中发生页面错乱的问题。<br>所以，访问量不大的项目，可以让研发同学苦逼一把，等到半夜偷偷上线，先上静态资源，再部署页面，看起来问题少一些。</p>\n</blockquote>\n<p>但是如果你现在正在维护一个用户访问量比较大的网站，改怎么办，你打算不解决了吗？</p>\n<p>可以采用<strong>非覆盖式发布</strong>，前面我们说了那么多都是<strong>覆盖式发布</strong><br><img src=\"/img/Static-resource-cache-control/10.png\" alt=\"\"></p>\n<p>全套做下来，就是相对比较完整的静态资源缓存控制方案了，而且，还要注意的是，静态资源的缓存控制要求在前端所有静态资源加载的位置都要做这样的处理。是的，所有！什么 js、css 自不必说，还要包括 js、css 文件中引用的资源路径，由于涉及到摘要信息，引用资源的摘要信息也会引起引用文件本身的内容改变，从而形成级联的摘要变化，大概就是如下图<br><img src=\"/img/Static-resource-cache-control/11.png\" alt=\"\"></p>\n",
            "tags": [
                "CSS",
                "JavaScript",
                "HTML",
                "Cache"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Use-lint-staged.html",
            "url": "https://blog.imlete.cn/article/Use-lint-staged.html",
            "title": "使用 Lint-staged 校验 Git 暂存区代码是否符合标准",
            "date_published": "2022-04-12T16:57:17.000Z",
            "content_html": "<h2 id=\"什么是-Lint-staged\"><a href=\"#什么是-Lint-staged\" class=\"headerlink\" title=\"什么是 Lint-staged\"></a>什么是 Lint-staged</h2><p>在 Git 暂存区执行相关的操作，如对暂存区进行<code>eslint</code>或是<code>prettier</code>，也可以自定义一些脚本</p>\n<p>官方写着很有趣的一段话:</p>\n<blockquote>\n<p>Run linters against staged git files and don’t let 💩 slip into your code base!<br>对暂存区进行代码校验，不要让 💩(便便)溜进你的代码库！</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>有些人可能会问，我都有<code>eslint</code>和<code>prettier</code>为什么还要用<code>lint-staged</code>?</p>\n<blockquote>\n<p>简而言之: <code>lint-staged</code>只对已修改的或是将要提交到仓库的文件进行校验</p>\n</blockquote>\n<p>因为<code>lint-staged</code>仅对暂存区的文件进行校验，而<code>eslint</code>和<code>prettier</code>则是全局或是指定某个目录下的的所有文件进行校验，在执行效率上肯定是<code>lint-staged</code>更胜一筹</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lint-staged -D</span><br></pre></td></tr></table></figure>\n\n<p>编辑<code>package.json</code>文件</p>\n<blockquote>\n<p>如果同时校验<code>.vue</code>则可以这么写<code>&quot;*.&#123;js,vue&#125;&quot;: &quot;npx eslint --fix&quot;</code><br>其内部使用的匹配规则是<a href=\"https://github.com/micromatch/micromatch\">micromatch</a></p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx eslint --fix&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>完整<code>package.json</code>文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;study-notes&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;prepare&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx husky install&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@commitlint/cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^16.2.3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@commitlint/config-conventional&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^16.2.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.13.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.0.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^12.3.7&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commitlint&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;@commitlint/config-conventional&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;*.js&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npx eslint --fix&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置好后，当你执行<code>git add .</code>后就可以使用<code>npx lint-staged</code>命令来校验暂存区的代码文件了</p>\n<p>有些人可能会说，这么麻烦，那我还不如直接在<code>git add .</code>之前使用<code>npx eslint --fix .</code>这也不是更好吗？</p>\n<p>文章开头一句说了，<code>lint-staged</code>只对暂存区的代码文件进行 lint，执行效率远超<code>npx eslint --fix .</code>命令，该命令会对全局的文件进行校验，不过有没有问题都要校验一遍(如果项目很大，那么这个差距就显现了)</p>\n<p>如果一个项目有<code>几百</code>或<code>上千</code>个文件，而我只是修改了一个文件，比如说一个标点符号或者是其它修改，那么<code>npx eslint --fix .</code>可能需要校验很久，而使用<code>npx lint-staged</code>则只需要校验这个文件即可</p>\n<h3 id=\"配合-Husky-使用\"><a href=\"#配合-Husky-使用\" class=\"headerlink\" title=\"配合 Husky 使用\"></a>配合 Husky 使用</h3><p>关于如何使用 husky 可以参考这篇文章: <a href=\"/article/Use-husky-manage-git-project.html\">使用 Husky(哈士奇)管理 Git 项目</a></p>\n<p>添加 hook 后执行<code>git commit</code>之前就会对暂存区的文件进行校验了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&#x27;npx lint-staged&#x27;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Service-Worker-Preferred-Request-Resource.html",
            "url": "https://blog.imlete.cn/article/Service-Worker-Preferred-Request-Resource.html",
            "title": "使用Service Worker优选请求资源",
            "date_published": "2022-03-20T17:54:13.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当你的网站或博客有多个部署点时，部署在某个平台的访问速度比较快，于是你就把你的域名解析到了这个平台上，但有时候还是会变得很慢，这时其它站点速度可能会变得比你当前使用的还快一点，难道还有来回解析域名吗？太麻烦了</p>\n<p>有没有可以直接返回最快网站资源的办法呢？</p>\n<ol>\n<li>使用域名管理平台，有些平台可以解析不同网络或地区的站点<br>例如<strong>腾讯云</strong>可以区分解析国内三大运营商、境内、境外、等一些解析选项(不太好用，还需要自己测试，难不成求使用其它运营商手机的朋友帮你测一下快不快嘛~)</li>\n<li>使用 js 拦截网站的所有请求，并篡改将请求发送到自己的所有站点，这些站点中如果哪个站点最快返回，那么就用最快返回的这个信息，与此同时将其它的请求全部切断</li>\n</ol>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>本文会详细说明如何<strong>使用 Service Worker 优选请求资源</strong>让你的网站比以前更快，更稳定</p>\n<p><strong>Service Worker</strong>在接下来的内容中统一称呼为<strong>sw</strong></p>\n<h3 id=\"Service-Worker\"><a href=\"#Service-Worker\" class=\"headerlink\" title=\"Service Worker\"></a>Service Worker</h3><blockquote>\n<p>更详细请看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API\">https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API</a></p>\n</blockquote>\n<p>Service workers 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器</p>\n<p>Service worker 运行在 worker 上下文，因此它不能访问 DOM。相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。</p>\n<p>出于安全考量，Service workers 只能由 HTTPS 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险。</p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>注册 sw 很简单，只需一行代码即可，如果注册成功，则 sw 会被下载到客户端并且安装和激活，这一步仅仅是注册而已，完整的是: 下载—&gt;安装—&gt;激活</p>\n<blockquote>\n<p>注意: sw 的注册日志记录在 Chrome 浏览器中可以通过访问<a href=\"chrome://serviceworker-internals\">chrome://serviceworker-internals</a>查看</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;/Service-Worker.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>/Service-Worker.js</code>必须是当前域下的 js 文件，他不能是其它域下的，即使 js 文件内的内容完全相等，那也不行</p>\n<p>如果你只想在某个路径写使用 sw 的话，你可以使用<code>scope</code>选项，当然<code>/Service-Worker.js</code>的位置也可以自定义(只要是同源且是 https 协议就可以)，如下只有在<code>/article/</code>文章页 sw 才启动，其它路径写 sw 不进行处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;/sw-test/Service-Worker.js&#x27;</span>, &#123; <span class=\"attr\">scope</span>: <span class=\"string\">&#x27;/article/&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>并且必须是 https 协议，如果是本地<code>127.0.0.1</code>或<code>localhost</code>是被允许的</p>\n<p>这是一个完整的注册代码</p>\n<p>将安装代码放置在<code>&lt;head&gt;</code>之后</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  ;(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (navigator.<span class=\"property\">serviceWorker</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      navigator.<span class=\"property\">serviceWorker</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        .<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;/sw.js&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 判断是否安装了sw</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">if</span> (<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;installSW&#x27;</span>)) <span class=\"keyword\">return</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;installSW&#x27;</span>, <span class=\"literal\">true</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 这里就不用清理setInterval了，因为页面刷新后就没有了</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">const</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 判断sw安装后，是否处于激活状态，激活后刷新页面</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (result.<span class=\"property\">active</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;activated&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"built_in\">clearInterval</span>(timer)</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"title function_\">fetch</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.<span class=\"title function_\">text</span>())</span></span><br><span class=\"line\"><span class=\"language-javascript\">                .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">text</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"variable language_\">document</span>.<span class=\"title function_\">open</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(text)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"variable language_\">document</span>.<span class=\"title function_\">close</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        .<span class=\"title function_\">catch</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"installing-状态\"><a href=\"#installing-状态\" class=\"headerlink\" title=\"installing 状态\"></a>installing 状态</h3><p>当注册成功后会触发<strong>install</strong>事件，然后触发<strong>activate</strong>事件，此时如果再次刷新页面，它俩都不会被触发了</p>\n<p>直到<code>/sw.js</code>发生了改变，它就会触发一次 <strong>install</strong> (不仅仅是代码改变，哪怕是多一个空格或是少一个空格，又或是写一个注释都会被触发)，但是只执行了<strong>install</strong>事件，并没有执行<strong>activate</strong>事件</p>\n<h3 id=\"activing-状态\"><a href=\"#activing-状态\" class=\"headerlink\" title=\"activing 状态\"></a>activing 状态</h3><p>为什么<strong>activate</strong>事件不触发了？因为已经有一个 sw 了，它一种处于等待状态，至于什么时候才会被触发，那就是等之前的 sw 停止了才会触发<strong>activate</strong>事件</p>\n<p>那有没有办法不让它等待呢？答案是: <strong>有</strong></p>\n<p>使用<code>skipWaiting()</code>跳过等待，它返回一个 promise 对象(异步的)，防止还在执行<code>skipWaiting()</code>的时候直接就跳到<strong>activate</strong>事件，我们需要使用<code>async/await</code>，也可以使用<code>event.waitUntil(skipWaiting())</code>方法把<code>skipWaiting()</code>放到里面，和<code>async/await</code>效果一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sw.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在sw中可以使用this或是self表示自身</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// event.waitUntil(self.skipWaiting())</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> self.<span class=\"title function_\">skipWaiting</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>触发<strong>activate</strong>事件后 ，当前这一次网页是不会被 sw 管理的，需要下次页面刷新才会被 sw 管理，那怎么让它立即管理页面呢？</p>\n<blockquote>\n<p>更详细请看:<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting\">https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting</a> &gt; <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim\">https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// event.waitUntil(self.clients.claim())</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> self.<span class=\"property\">clients</span>.<span class=\"title function_\">claim</span>() <span class=\"comment\">// 立即管理页面</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>详细上面生命周期已经详细说明了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sw.js</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// event.waitUntil(self.skipWaiting())</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> self.<span class=\"title function_\">skipWaiting</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"捕获请求\"><a href=\"#捕获请求\" class=\"headerlink\" title=\"捕获请求\"></a>捕获请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sw.js</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 所有请求都得转到 handleRequest 函数内处理</span></span><br><span class=\"line\">  <span class=\"title function_\">handleRequest</span>(event.<span class=\"property\">request</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 如果 handleRequest 请求成功则将数据响应到网页</span></span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> event.<span class=\"title function_\">respondWith</span>(result))</span><br><span class=\"line\">    <span class=\"comment\">// 如果 handleRequest 请求失败，什么都不做(这是网页自己走自己的实际请求)</span></span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理请求</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRequest</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(req.<span class=\"property\">url</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>event.respondWith()</code>: 给浏览器一个响应，因为我们已经使用<code>Fetch API</code>替浏览器发送了请求，并且得到了结果并且返回，那么自然是要返回给浏览器啦</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch API</a>可以和<code>XMLHttpRequest</code>一样，可以发送任何请求</p>\n<blockquote>\n<p>值得一提的是使用 Fetch API 发送请求是会存在跨域问题的，一旦被跨域拦截，那么就上面都没有返回，会导致页面显示不了请求的内容(例如图片被跨域拦截了)，而 img、script 标签它们是不会发生跨域请求问题的，所以上面 catch 捕获异常一个 0 和 null 差不多<br>既然没有用到 event.respondWith 那自然是没有给浏览器返回数据啦，那浏览器就自己请求(很好的避免了这个问题)</p>\n</blockquote>\n<h2 id=\"篡改请求\"><a href=\"#篡改请求\" class=\"headerlink\" title=\"篡改请求\"></a>篡改请求</h2><p>上面我们都可以使用<code>Fetch API</code>替浏览器发送请求了，那是不是可以篡改呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 处理请求</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRequest</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 仅仅只是举个例子，更多奇妙的用法等待你去探索</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;https://cdn.jsdelivr.net/npm/xhr-ajax/dist/&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = req.<span class=\"property\">url</span>.<span class=\"title function_\">replace</span>(str + <span class=\"string\">&#x27;ajax.js&#x27;</span>, str + <span class=\"string\">&#x27;ajax.min.js&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上代码，我们就可以将 ajax 请求的第三方库 js 文件请求变为压缩后的请求，并返回给浏览器(篡改成功)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量请求</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRequest</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以是多个</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> urls = [</span><br><span class=\"line\">    <span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/xhr-ajax/dist/ajax.min.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;https://unpkg.com/xhr-ajax/dist/ajax.min.js&quot;</span>,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"comment\">// 中断一个或多个请求</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 可以中断请求</span></span><br><span class=\"line\">  <span class=\"comment\">// https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController#%E5%B1%9E%E6%80%A7</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> signal = controller.<span class=\"property\">signal</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历将所有的请求地址转换为promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">PromiseAll</span> = urls.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">async</span> (resolve, reject) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fetch</span>(url, &#123; signal &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"keyword\">await</span> res.<span class=\"title function_\">arrayBuffer</span>(), &#123;</span><br><span class=\"line\">              <span class=\"attr\">status</span>: res.<span class=\"property\">status</span>,</span><br><span class=\"line\">              <span class=\"attr\">headers</span>: res.<span class=\"property\">headers</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        )</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (res.<span class=\"property\">status</span> !== <span class=\"number\">200</span>) <span class=\"title function_\">reject</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">          <span class=\"comment\">// 只要有一个请求成功返回那么就把所有的请求断开</span></span><br><span class=\"line\">          controller.<span class=\"title function_\">abort</span>(); <span class=\"comment\">// 中断</span></span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(res);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"literal\">null</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 使用 Promise.any 发送批量请求，它接收一个可迭代对象，例如数组就是一个可迭代对象</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>(<span class=\"title class_\">PromiseAll</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Promise.any 具体请看: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any</a><br>AbortController 具体请看: <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController\">https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController</a></p>\n</blockquote>\n<p>只要传入的迭代对象中的任何一个 <code>promise</code> 返回成功（resolve）状态，那么它就返回成功状态，如果其中的所有的 <code>promises</code> 都失败，那么就会把所有的失败返回</p>\n<p>所以只要<code>Promise.any</code>有一个成功状态的数据返回，那么我们就把这个数据响应给浏览器，而其它 的请求全部切断，这样就可以高效的在不同地区响应最快的资源给用户啦~</p>\n<p>这也是正文开始前我们所需要解决的问题</p>\n<h2 id=\"完整-sw-js-文件\"><a href=\"#完整-sw-js-文件\" class=\"headerlink\" title=\"完整 sw.js 文件\"></a>完整 sw.js 文件</h2><p>这是我总结写出的一个 sw.js 文件，你只需要将下面的<code>origin</code>数组改成你的博客地址就可以了，其它的可以不用动，如果你想添加新东西，那就随便你啦~哈哈哈</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> origin = [<span class=\"string\">&#x27;https://blog.imlete.cn&#x27;</span>, <span class=\"string\">&#x27;https://lete114.github.io&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cdn = &#123;</span><br><span class=\"line\">  <span class=\"attr\">gh</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">jsdelivr</span>: <span class=\"string\">&#x27;https://cdn.jsdelivr.net/gh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fastly</span>: <span class=\"string\">&#x27;https://fastly.jsdelivr.net/gh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gcore</span>: <span class=\"string\">&#x27;https://gcore.jsdelivr.net/gh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">testingcf</span>: <span class=\"string\">&#x27;https://testingcf.jsdelivr.net/gh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">test1</span>: <span class=\"string\">&#x27;https://test1.jsdelivr.net/gh&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">tianli</span>: <span class=\"string\">&#x27;https://cdn1.tianli0.top/gh&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">combine</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">jsdelivr</span>: <span class=\"string\">&#x27;https://cdn.jsdelivr.net/combine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fastly</span>: <span class=\"string\">&#x27;https://fastly.jsdelivr.net/combine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gcore</span>: <span class=\"string\">&#x27;https://gcore.jsdelivr.net/combine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">testingcf</span>: <span class=\"string\">&#x27;https://testingcf.jsdelivr.net/combine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">test1</span>: <span class=\"string\">&#x27;https://test1.jsdelivr.net/combine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">tianli</span>: <span class=\"string\">&#x27;https://cdn1.tianli0.top/combine&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">npm</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">jsdelivr</span>: <span class=\"string\">&#x27;https://cdn.jsdelivr.net/npm&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fastly</span>: <span class=\"string\">&#x27;https://fastly.jsdelivr.net/npm&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gcore</span>: <span class=\"string\">&#x27;https://gcore.jsdelivr.net/npm&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">testingcf</span>: <span class=\"string\">&#x27;https://testingcf.jsdelivr.net/npm&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">test1</span>: <span class=\"string\">&#x27;https://test1.jsdelivr.net/npm&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">unpkg</span>: <span class=\"string\">&#x27;https://unpkg.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">tianli</span>: <span class=\"string\">&#x27;https://cdn1.tianli0.top/npm&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> self.<span class=\"title function_\">skipWaiting</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> self.<span class=\"property\">clients</span>.<span class=\"title function_\">claim</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">respondWith</span>(<span class=\"title function_\">handleRequest</span>(event.<span class=\"property\">request</span>))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回响应</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">progress</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"keyword\">await</span> res.<span class=\"title function_\">arrayBuffer</span>(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">status</span>: res.<span class=\"property\">status</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: res.<span class=\"property\">headers</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleRequest</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> urls = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> urlStr = req.<span class=\"property\">url</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> urlObj = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(urlStr)</span><br><span class=\"line\">  <span class=\"comment\">// 为了获取 cdn 类型</span></span><br><span class=\"line\">  <span class=\"comment\">// 例如获取gh (https://cdn.jsdelivr.net/gh)</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = urlObj.<span class=\"property\">pathname</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 匹配 cdn</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> type <span class=\"keyword\">in</span> cdn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === path) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> cdn[type]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = cdn[type][key] + urlObj.<span class=\"property\">pathname</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;/&#x27;</span> + path, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        urls.<span class=\"title function_\">push</span>(url)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果上方 cdn 遍历 匹配到 cdn 则直接统一发送请求(不会往下执行了)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (urls.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">fetchAny</span>(urls)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将用户访问的当前网站与所有源站合并</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> origins = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([location.<span class=\"property\">origin</span>, ...origin])]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历判断当前请求是否是源站主机</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = origins.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(urlStr).<span class=\"property\">hostname</span> === <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(i).<span class=\"property\">hostname</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果是源站，则竞速获取(不会往下执行了)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (is) &#123;</span><br><span class=\"line\">    origins = origins.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> i + urlObj.<span class=\"property\">pathname</span> + urlObj.<span class=\"property\">search</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fetchAny</span>(origins)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 抛出异常是为了让sw不拦截请求</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;不是源站&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Promise.any 的 polyfill</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPromiseAny</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"property\">any</span> = <span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      promises = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(promises) ? promises : []</span><br><span class=\"line\">      <span class=\"keyword\">let</span> len = promises.<span class=\"property\">length</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> errs = []</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">AggregateError</span>(<span class=\"string\">&#x27;All promises were rejected&#x27;</span>))</span><br><span class=\"line\">      promises.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">p</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!p <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Promise</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(p)</span><br><span class=\"line\">        p.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(res),</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            len--</span><br><span class=\"line\">            errs.<span class=\"title function_\">push</span>(err)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len === <span class=\"number\">0</span>) <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">AggregateError</span>(errs))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送所有请求</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchAny</span>(<span class=\"params\">urls</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 中断一个或多个请求</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> signal = controller.<span class=\"property\">signal</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历将所有的请求地址转换为promise</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">PromiseAll</span> = urls.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">fetch</span>(url, &#123; signal &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(progress)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> r = res.<span class=\"title function_\">clone</span>()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (r.<span class=\"property\">status</span> !== <span class=\"number\">200</span>) <span class=\"title function_\">reject</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">          controller.<span class=\"title function_\">abort</span>() <span class=\"comment\">// 中断</span></span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(r)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"literal\">null</span>))</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断浏览器是否支持 Promise.any</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title class_\">Promise</span>.<span class=\"property\">any</span>) <span class=\"title function_\">createPromiseAny</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 谁先返回&quot;成功状态&quot;则返回谁的内容，如果都返回&quot;失败状态&quot;则返回null</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">any</span>(<span class=\"title class_\">PromiseAll</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "教程"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Parse-get-url-string.html",
            "url": "https://blog.imlete.cn/article/Parse-get-url-string.html",
            "title": "NodeJS 解析 GET 请求 url 字符串",
            "date_published": "2022-03-06T17:29:57.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当你使用<code>querystring.parse()</code>或者是<code>url.parse()</code>时会得到一个警告<code>@deprecated — since v11.0.0 - Use the WHATWG URL API.</code></p>\n<p>由于 <code>url.parse()</code> 方法使用一种宽松的非标准算法来解析网址字符串，因此可能会引入安全问题<br>具体来说，已经确定了主机名欺骗以及用户名和密码处理不当的问题</p>\n<p><code>url.parse()</code>在<code>v11.0.0</code>开始被打上<code>@deprecated</code>注解(也不知道叫做注解合不合理，可能是 java 写多了吧)，在<code>v16.0.0</code>后被完全移除，同时还一并移除的有<code>url.format()</code> <code>url.resolve()</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在 querystring 的 TS 源码开头已经被打上了 <span class=\"doctag\">@deprecated</span> 具体说明时候被完全移除目前还不得而知</span></span><br><span class=\"line\"><span class=\"comment\"> * 部分注释已被我被删除</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@deprecated</span> <span class=\"variable\">Legacy</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> [source](https://github.com/nodejs/node/blob/v17.0.0/lib/querystring.js)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;querystring&quot;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;url&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 在 url 的 TS 源码里 parse() 已经被打上了 <span class=\"doctag\">@deprecated</span> 从v11.0.0开始，到v16.0.0被移除</span></span><br><span class=\"line\"><span class=\"comment\">   * 部分注释已被我被删除</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@since</span> v0.1.25</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@deprecated</span> Legacy: Use the WHATWG URL API instead.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> urlString The URL string to parse.</span></span><br><span class=\"line\"><span class=\"comment\">   * 部分注释已被我被删除</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">urlString: <span class=\"built_in\">string</span></span>): <span class=\"title class_\">UrlWithStringQuery</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么？\"><a href=\"#为什么？\" class=\"headerlink\" title=\"为什么？\"></a>为什么？</h2><p>这是因为 nodejs 的<code>url.parse</code>方法采用的传统的<code>urlObject</code>，不符合<a href=\"https://url.spec.whatwg.org/#goals\">URL 标准</a>,因此被弃用</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/WHATWG\">WHATWG</a> 是 <em>(Web Hypertext Application Technology Working GroupWeb 超文本应用程序技术工作组)</em></p>\n<h2 id=\"使用-URL\"><a href=\"#使用-URL\" class=\"headerlink\" title=\"使用 URL\"></a>使用 URL</h2><p>使用 URL 类对 url 进行操作，<a href=\"https://nodejs.org/api/url.html#url_the_whatwg_url_api\">详细文档见</a>(可将域名后的 org 改为 cn 看中文文档)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> urlStr = <span class=\"string\">&quot;https://example.org/foo?name=zhangsan&amp;age=18&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(urlStr);</span><br><span class=\"line\"><span class=\"comment\">// searchParams 用的是 URLSearchParams API</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = url.<span class=\"property\">searchParams</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = url.<span class=\"property\">searchParams</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// zhangsan</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(age); <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>前面脆皮了那么多内容，现在才是本文的主要内容</p>\n<p>我们可以这么写来解析 get 请求的参数<br>访问: <code>http://localhost:3000/foo?name=zhangsan&amp;age=18</code></p>\n<blockquote>\n<p>因为我比较懒，我就不写那么多示例代码了，全部塞到一个代码示例里，大家勉强看一下注释吧<br>为了方便，我封装成了一个库，可以获取POST、GET请求的参数，觉得可以的话可以点个star✨支持一下😁<br>项目地址: <a href=\"https://github.com/Lete114/Body-Data\">Body-Data: https://github.com/Lete114/Body-Data</a></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/favicon.ico&quot;</span>) <span class=\"keyword\">return</span> res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// req.url含问号前面的内容: /foo?name=zhangsan&amp;age=18</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(req.<span class=\"property\">url</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 也可以使用以下两行代码移除 ?&quot;问号&quot; 前面的内容</span></span><br><span class=\"line\">  <span class=\"comment\">//   const index = url.indexOf(&#x27;?&#x27;) + 1</span></span><br><span class=\"line\">  <span class=\"comment\">//   const string = url.substring(index)</span></span><br><span class=\"line\">  <span class=\"comment\">//   const query = new URLSearchParams(string);</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这是为了解析出search，search不含 ?&quot;问号&quot; 前面的内容</span></span><br><span class=\"line\">  <span class=\"comment\">// 也就是 name=zhangsan&amp;age=18</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(req.<span class=\"property\">url</span>, <span class=\"string\">`http://<span class=\"subst\">$&#123;req.headers.host&#125;</span>/`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> query = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(url.<span class=\"property\">search</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(query.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// zhangsan</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(query.<span class=\"title function_\">entries</span>()); <span class=\"comment\">// URLSearchParams Iterator &#123; [ &#x27;name&#x27;, &#x27;zhangsan&#x27; ], [ &#x27;age&#x27;, &#x27;18&#x27; ] &#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(query.<span class=\"title function_\">keys</span>()); <span class=\"comment\">// URLSearchParams Iterator &#123; &#x27;name&#x27;, &#x27;age&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 定义一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params1 = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 如果for循环内只有1行代码是可以简写成1行的，如下</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">of</span> query.<span class=\"title function_\">keys</span>()) params1[i] = query.<span class=\"title function_\">get</span>(i);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用entries()也可以</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params2 = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">of</span> query.<span class=\"title function_\">entries</span>()) params2[i[<span class=\"number\">0</span>]] = i[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用 Object.fromEntries()</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> params3 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">fromEntries</span>(query);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params1); <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27;, age: &#x27;18&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params2); <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27;, age: &#x27;18&#x27; &#125;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params3); <span class=\"comment\">// &#123; name: &#x27;zhangsan&#x27;, age: &#x27;18&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(params3));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "Node"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/async-await-error-handling.html",
            "url": "https://blog.imlete.cn/article/async-await-error-handling.html",
            "title": "如何优雅的处理async/await错误信息",
            "date_published": "2021-11-12T16:42:37.000Z",
            "content_html": "<h2 id=\"废话\"><a href=\"#废话\" class=\"headerlink\" title=\"废话\"></a>废话</h2><p>在实际开发中，用到了一些异步函数或是请求。你可能会写<code>.then()</code>和<code>.catch()</code>来处理异步的成功与失败<br>那么如果这个<code>.then()</code>里又有一个请求，那么时不时又得写<code>.then()</code>和<code>.catch()</code>，那么很有可能<code>.catch()</code>里也有呢？</p>\n<blockquote>\n<p>这里就不多说什么回调地狱的问题了<br>你可能就会用<code>async</code>和<code>await</code>来处理异步请求，但这也就会随着产生一个问题，那就是<code>await</code>它无法捕获异步请求的错误啊</p>\n</blockquote>\n<p>这时你又想到，那我包一层<code>try...catch</code>不就好了吗？<br>但是这仅仅只能处理当前这个方法的错误，如果这个方法里又多个请求或者说是其他同步代码产生的问题，错误也只能定位到这个方法。<br><code>try...catch</code>对代码的可读性不是很友好(个人觉得)</p>\n<blockquote>\n<p>如果你觉得上面所说的，你觉得很 ok，就是要用上面说的<code>try...catch</code>还是<code>.then()</code>和<code>.catch()</code>，就随便你<br>萝卜青菜，各有所爱(你想用啥就用啥)</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>现在有如下代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成功</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Success</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;Run Success&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 失败</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UnSuccess</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Run Error&quot;</span>));</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title class_\">Success</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"then-catch\"><a href=\"#then-catch\" class=\"headerlink\" title=\"then-catch\"></a>then-catch</h2><p>用<code>.then()</code>和<code>.catch()</code>来处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">UnSuccess</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, res);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try-catch\"></a>try-catch</h2><p>用<code>try...catch</code>来处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title class_\">UnSuccess</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"then-catch-结构赋值\"><a href=\"#then-catch-结构赋值\" class=\"headerlink\" title=\"then-catch 结构赋值\"></a>then-catch 结构赋值</h2><p><code>.then()</code>和<code>.catch()</code>联合<code>结构赋值</code>来处理</p>\n<blockquote>\n<p>这种方式仅仅是简化了<code>.then()</code>和<code>.catch()</code>方式而已</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [err, result] = <span class=\"keyword\">await</span> <span class=\"title class_\">UnSuccess</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> [<span class=\"literal\">null</span>, result])</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装-then-catch-结构赋值\"><a href=\"#封装-then-catch-结构赋值\" class=\"headerlink\" title=\"封装 then-catch 结构赋值\"></a>封装 then-catch 结构赋值</h2><p>简单的封装以下就可用在很多地方进行复用了</p>\n<blockquote>\n<p>根前面的代码对比时不时好了很多？</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise函数错误处理</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; asyncFn 这是一个Promise函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Array</span>&#125; [err,result]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">AsyncHandling</span>(<span class=\"params\">asyncFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">asyncFn</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> [<span class=\"literal\">null</span>, result])</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [err, result] = <span class=\"keyword\">await</span> <span class=\"title class_\">AsyncHandling</span>(<span class=\"title class_\">UnSuccess</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不管你用什么方式都可用，看你喜欢什么风格的编码方式<br>此篇文章只是提供更多的方式来解决实际开发中的问题<br>如果你有更好的方式欢迎留言评论</p>\n",
            "tags": [
                "记录",
                "JavaScript"
            ]
        }
    ]
}