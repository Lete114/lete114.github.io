{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lete乐特 's Blog • All posts by \"记录\" tag",
    "description": "我相信我可以，但我一直在路上，所以我有无限的可能！！",
    "home_page_url": "https://blog.imlete.cn",
    "items": [
        {
            "id": "https://blog.imlete.cn/article/Beautify-Windows-Terminal-PowerShell.html",
            "url": "https://blog.imlete.cn/article/Beautify-Windows-Terminal-PowerShell.html",
            "title": "美化 Windows 终端(Terminal + PowerShell)",
            "date_published": "2023-03-18T12:11:03.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>废话不多说，这是我做的一个 Oh-My-Posh 终端主题，仓库地址: <a href=\"https://github.com/Lete114/oh-my-posh-themes\">https://github.com/Lete114/oh-my-posh-themes</a></p>\n<p>效果如下:<br><img src=\"/img/Beautify-Windows-Terminal-PowerShell/lete114.png\" alt=\"\"></p>\n<h2 id=\"Windows-Terminal\"><a href=\"#Windows-Terminal\" class=\"headerlink\" title=\"Windows Terminal\"></a>Windows Terminal</h2><blockquote>\n<p>安装需要 Win10 2004（内部版本 19041）或更高版本</p>\n</blockquote>\n<p>Windows Terminal 是微软开源一个终端工具，主要功能包括多个选项卡、窗格、Unicode、和 UTF-8 字符支持，GPU 加速文本渲染引擎以及自定义主题、样式和配置</p>\n<p>总之比 cmd、powershell 那丑不拉几的窗口好使就对了</p>\n<p>可以通过微软商店直接安装，或者到开源仓库取下载安装都可以</p>\n<p><a href=\"https://github.com/microsoft/terminal\">https://github.com/microsoft/terminal</a></p>\n<h2 id=\"Oh-My-Posh\"><a href=\"#Oh-My-Posh\" class=\"headerlink\" title=\"Oh My Posh\"></a>Oh My Posh</h2><p>Oh My Posh 类似于 Oh My zsh 的一个命令行提示工具，具体的得看官网描述 <a href=\"https://ohmyposh.dev/docs/\">Oh My Posh Docs</a></p>\n<p>安装 Oh My Posh ，参考官网安装教程<br><a href=\"https://ohmyposh.dev/docs/installation/windows\">https://ohmyposh.dev/docs/installation/windows</a></p>\n<p>使用 <code>winget</code> 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winget install JanDeDobbeleer.OhMyPosh -s winget</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>建议使用 powershell</p>\n</blockquote>\n<p>使用 Oh My Posh，如果你不找到你当前使用的是什么终端，你可以执行这条命令查看，具体详细请看官网 <a href=\"https://ohmyposh.dev/docs/installation/prompt\">https://ohmyposh.dev/docs/installation/prompt</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oh-my-posh get shell</span><br></pre></td></tr></table></figure>\n\n<p>使用记事本或 vscode 打开 powershell 的配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 记事本</span></span><br><span class=\"line\">notepad <span class=\"variable\">$PROFILE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vscode</span></span><br><span class=\"line\">code <span class=\"variable\">$PROFILE</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当上述命令出现错误时，确保先创建配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">New-Item -Path <span class=\"variable\">$PROFILE</span> -Type File -Force</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>在文件中添加如下代码使用 Oh My Posh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意这仅仅只是使用了 Oh My Posh，你可能会发现终端有乱码</span></span><br><span class=\"line\"><span class=\"comment\"># 因为 Oh My Posh 使用了 Nerd Fonts 字体中的一些图标，如果你的电脑中没有 Nerd Fonts 字体就会出现乱码</span></span><br><span class=\"line\"><span class=\"comment\"># 自带的主题就使用了 Nerd Fonts 的图标</span></span><br><span class=\"line\">oh-my-posh init pwsh | Invoke-Expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义主题，使用 Oh My Posh 自带的一些开箱即用主题</span></span><br><span class=\"line\"><span class=\"comment\"># 这里是 Oh My Posh 自带的主题 https://ohmyposh.dev/docs/themes</span></span><br><span class=\"line\">oh-my-posh init pwsh --config <span class=\"string\">&quot;<span class=\"variable\">$env</span>:POSH_THEMES_PATH/robbyrussell.omp.json&quot;</span> | Invoke-Expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载我做的主题，我主题不需要安装 Nerd Fonts 字体</span></span><br><span class=\"line\"><span class=\"comment\"># https://raw.githubusercontent.com/Lete114/oh-my-posh-themes/main/lete114/lete114.minimal.omp.yaml</span></span><br><span class=\"line\">oh-my-posh init pwsh --config <span class=\"string\">&quot;你下载的路径/lete114.minimal.omp.yaml&quot;</span> | Invoke-Expression</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后执行以下命令加载配置文件</span></span><br><span class=\"line\">. <span class=\"variable\">$profile</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><p>如果你使用的主题是含 <code>minimal</code> 的就不需要安装</p>\n<p>参考官方: <a href=\"https://ohmyposh.dev/docs/installation/fonts#configuration\">https://ohmyposh.dev/docs/installation/fonts#configuration</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oh-my-posh font install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 也可以直接手动下载</span></span><br><span class=\"line\"><span class=\"comment\"># 下载完成后解压，全选右键点击安装即可自动安装</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以下操作是根据 Oh My Posh 官网教程搬过来的，但不知道为什么我的字体依然显示乱码<br>有知道是啥问题的小伙伴可以在评论区回复我<br>当然，设置字体也可以在 Windows Terminal 的设置中设置，不必打开配置文件 (但同样我也不知道为什么我的 Windows Terminal 里面没有设置字体的选项，就挺离谱 😅)</p>\n</blockquote>\n<p>安装完成后打开 Windows Terminal 然后按 <code>Ctrl+Shift+,</code>(逗号) 来打开 settings.json 配置文件</p>\n<p>找到 <code>profiles-&gt;defaults</code> 设置 <code>font-&gt;face</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;profiles&quot;:</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &quot;defaults&quot;:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;font&quot;:</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;face&quot;: &quot;MesloLGM NF&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"posh-git\"><a href=\"#posh-git\" class=\"headerlink\" title=\"posh-git\"></a>posh-git</h2><p>提供完整的 git 命令行提示以及自动补全</p>\n<p><a href=\"https://github.com/dahlbyk/posh-git\">https://github.com/dahlbyk/posh-git</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 posh-git</span></span><br><span class=\"line\">Install-Module posh-git -Scope CurrentUser -Force</span><br></pre></td></tr></table></figure>\n\n<p>然后打开 PowerShell 配置文件，添加一行导入命令 <code>Import-Module posh-git</code> 即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 记事本打开配置文件</span></span><br><span class=\"line\">notepad <span class=\"variable\">$PROFILE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或使用 vscode 打开配置文件</span></span><br><span class=\"line\">code <span class=\"variable\">$PROFILE</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PSReadLine\"><a href=\"#PSReadLine\" class=\"headerlink\" title=\"PSReadLine\"></a>PSReadLine</h2><blockquote>\n<p>PowerShell 官方的插件，可以放心使用</p>\n</blockquote>\n<p>提供输入提醒，类似于 zsh 中有个插件，具体叫什么名字我忘了，就是当你输入一个命令输入到一半后，控制台就会有灰色命令提示，之后按下方向键的右键（-&gt;）键就能不全的根据</p>\n<p><a href=\"https://github.com/PowerShell/PSReadLine\">https://github.com/PowerShell/PSReadLine</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以下是搬运的官方的教程</span></span><br><span class=\"line\"></span><br><span class=\"line\">Install-Module -Name PowerShellGet -Force</span><br><span class=\"line\">Install-Module PSReadLine -AllowPrerelease -Force</span><br></pre></td></tr></table></figure>\n\n<p>之后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 记事本打开配置文件</span></span><br><span class=\"line\">notepad <span class=\"variable\">$PROFILE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或使用 vscode 打开配置文件</span></span><br><span class=\"line\">code <span class=\"variable\">$PROFILE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PSReadLine</span></span><br><span class=\"line\">Import-Module PSReadLine</span><br><span class=\"line\"><span class=\"comment\"># Enable Prediction History</span></span><br><span class=\"line\">Set-PSReadLineOption -PredictionSource History</span><br><span class=\"line\"><span class=\"comment\"># Advanced Autocompletion for arrow keys</span></span><br><span class=\"line\">Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class=\"line\">Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br></pre></td></tr></table></figure>\n\n\n\n",
            "tags": [
                "记录",
                "Windows"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/nonuse-es6+-implements-call-apply-bind.html",
            "url": "https://blog.imlete.cn/article/nonuse-es6+-implements-call-apply-bind.html",
            "title": "不使用 ES6+ 实现 call apply bind 方法",
            "date_published": "2022-11-04T15:24:31.000Z",
            "content_html": "<p>使用 ES6+ 实现这三个方法其实非常简单，本文就来挑战一下，如果不适用 ES6+ 的情况下如何实现这三个方法</p>\n<blockquote>\n<p>难点: 不能使用扩展运算符(…)该如何接收参数和传入参数</p>\n</blockquote>\n<p>至于这三个方法有什么区别可以阅读我之前的这篇文章 <a href=\"/article/call-apply-bind-distinction.html\">call()-apply()-bind()方法有什么不同？</a></p>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><p>就不多说废话了，直接看代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">_this, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    _this = _this || <span class=\"variable language_\">window</span></span><br><span class=\"line\">    _this[<span class=\"string\">&#x27;#function#&#x27;</span>] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!args) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _this[<span class=\"string\">&#x27;#function#&#x27;</span>]()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> params = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(args)</span><br><span class=\"line\">      <span class=\"comment\">// 当 JSON.stringify 把一个数组解析成字符串是会多套一层 ‘[]’ ，所以需要裁切掉</span></span><br><span class=\"line\">      params = params.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, params.<span class=\"property\">length</span> - <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 由于 Function 无法访问上级作用域，由于上层以及裁掉了首尾部分</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以得到 _this[&quot;#function#&quot;](1,2) 这样就能实现扩展运算符(...)的操作了，关于 new Function 请自行查阅</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&#x27;_this&#x27;</span>, <span class=\"string\">&#x27;return _this[&quot;#function#&quot;](&#x27;</span> + params + <span class=\"string\">&#x27;)&#x27;</span>)(_this)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// ------ 上面这坨你也可以改为 eval() ------</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> params = []</span><br><span class=\"line\">      <span class=\"comment\">// 注意，这里的 i 初始值是 1 主要目的是为了去除第一个参数(也就是 _this)</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        params.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;arguments[&#x27;</span> + i + <span class=\"string\">&#x27;]&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 这里解释一下，当引用类型与字符串拼接的时候会隐式调用 toString() ，数组调用 toString() 会返回如下结果</span></span><br><span class=\"line\">      <span class=\"comment\">// _this[&quot;#function#&quot;](arguments[1],arguments[2],arguments[3])</span></span><br><span class=\"line\">      <span class=\"comment\">// eval 执行后可以访问上级作用域的变量，这里就可以实现扩展运算符(...)的操作了</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(<span class=\"string\">&#x27;_this[&quot;#function#&quot;](&#x27;</span> + params + <span class=\"string\">&#x27;)&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> _this[<span class=\"string\">&#x27;#function#&#x27;</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h2><p>由于前面以及实现了 <code>myApply</code> 方法，再 <code>myCall</code> 即可直接调用，如果要完整写一个 <code>myCall</code> 也只是增加代码冗余而已</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">_this</span>) &#123;</span><br><span class=\"line\">  _this = _this || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = []</span><br><span class=\"line\">  <span class=\"comment\">// 注意，这里的 i 初始值是 1 主要目的是为了去除第一个参数(也就是 _this)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    params.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">myApply</span>(_this, params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><p>如上，可以继续复用已经封装好的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">_this</span>) &#123;</span><br><span class=\"line\">  _this = _this || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> params = []</span><br><span class=\"line\">  <span class=\"comment\">// 注意，这里的 i 初始值是 1 主要目的是为了去除第一个参数(也就是 _this)</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    params.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注意这里的 i 初始值是 0 ,因为它不需要移除 _this ，可能这有点乱，希望读者多多思考</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      params.<span class=\"title function_\">push</span>(<span class=\"variable language_\">arguments</span>[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.<span class=\"title function_\">myApply</span>(_this, params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是本文的全部内容，可能会存在一些小瑕疵，希望各位读者留言评论或优化</p>\n",
            "tags": [
                "记录",
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Windows-files-tree.html",
            "url": "https://blog.imlete.cn/article/Windows-files-tree.html",
            "title": "Windows的tree命令生成文件结构树",
            "date_published": "2022-04-03T18:32:29.000Z",
            "content_html": "<p>你可能在很多人的博客文章内或是一些文档内见到清晰的文件结构说明</p>\n<p>那他们是怎么做的呢？不会是一个文件一个文件的拼接手写吧？不会吧？</p>\n<p>各大操作系统都有<code>tree</code>这个命令，本文仅描述<strong>Windows</strong>系统</p>\n<p>先看看<code>tree</code>命令有些说明参数说明吧，输入<code>tree /?</code>也可以使用<code>help tree</code>参数说明</p>\n<blockquote>\n<p>Windows系统自带的功能实在是太少了，例如我需要生成指定文件的在该结构总的位置，则系统自带的是的<code>tree</code>是无法办到的，这里推荐使用<a href=\"https://www.npmjs.com/package/tree-node-cli\">tree-node-cli</a></p>\n</blockquote>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">L:\\<span class=\"title\">Windows</span>\\<span class=\"title\">Desktop</span>\\新建文件夹&gt;<span class=\"title\">tree</span> /?</span></span><br><span class=\"line\"><span class=\"function\">以图形显示驱动器或路径的文件夹结构。</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">TREE</span> [<span class=\"title\">drive</span>:][<span class=\"title\">path</span>] [/<span class=\"title\">F</span>] [/<span class=\"title\">A</span>]</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">   /<span class=\"title\">F</span>   显示每个文件夹中文件的名称。</span></span><br><span class=\"line\"><span class=\"function\">   /<span class=\"title\">A</span>   使用 <span class=\"title\">ASCII</span> 字符，而不使用扩展字符。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>/F /A 都可以使用小写，对大小写不敏感(博主设备: win11)</p>\n</blockquote>\n<p>本文以<code>.git</code>文件文件夹结构举例</p>\n<p>本文的目录结构</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L:.</span><br><span class=\"line\">└─test</span><br><span class=\"line\">    └─.git</span><br><span class=\"line\">        ├─hooks</span><br><span class=\"line\">        ├─info</span><br><span class=\"line\">        ├─objects</span><br><span class=\"line\">        │  ├─info</span><br><span class=\"line\">        │  └─pack</span><br><span class=\"line\">        └─refs</span><br><span class=\"line\">            ├─heads</span><br><span class=\"line\">            └─tags</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>tree /F &gt; tree.txt</code>: 生成的文件目录树形结构写入到 tree.txt</p>\n</blockquote>\n<p>使用<strong>特殊字符</strong></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tree</span> test</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">  ├─hooks</span><br><span class=\"line\">  ├─info</span><br><span class=\"line\">  ├─objects</span><br><span class=\"line\">  │  ├─info</span><br><span class=\"line\">  │  └─pack</span><br><span class=\"line\">  └─refs</span><br><span class=\"line\">     ├─heads</span><br><span class=\"line\">     └─tags</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tree</span> test /F</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">  │  config</span><br><span class=\"line\">  │  description</span><br><span class=\"line\">  │  HEAD</span><br><span class=\"line\">  │</span><br><span class=\"line\">  ├─hooks</span><br><span class=\"line\">  │      applypatch-msg.sample</span><br><span class=\"line\">  │      commit-msg.sample</span><br><span class=\"line\">  │      fsmonitor-watchman.sample</span><br><span class=\"line\">  │      post-update.sample</span><br><span class=\"line\">  │      pre-applypatch.sample</span><br><span class=\"line\">  │      pre-commit.sample</span><br><span class=\"line\">  │      pre-merge-commit.sample</span><br><span class=\"line\">  │      pre-push.sample</span><br><span class=\"line\">  │      pre-rebase.sample</span><br><span class=\"line\">  │      pre-receive.sample</span><br><span class=\"line\">  │      prepare-commit-msg.sample</span><br><span class=\"line\">  │      push-to-checkout.sample</span><br><span class=\"line\">  │      update.sample</span><br><span class=\"line\">  │</span><br><span class=\"line\">  ├─info</span><br><span class=\"line\">  │      exclude</span><br><span class=\"line\">  │</span><br><span class=\"line\">  ├─objects</span><br><span class=\"line\">  │  ├─info</span><br><span class=\"line\">  │  └─pack</span><br><span class=\"line\">  └─refs</span><br><span class=\"line\">      ├─heads</span><br><span class=\"line\">      └─tags</span><br></pre></td></tr></table></figure>\n\n<p>使用 <strong>ASCII 字符</strong></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tree</span> test /A</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">  +---hooks</span><br><span class=\"line\">  +---info</span><br><span class=\"line\">  +---objects</span><br><span class=\"line\">  |   +---info</span><br><span class=\"line\">  |   \\---pack</span><br><span class=\"line\">  \\---refs</span><br><span class=\"line\">      +---heads</span><br><span class=\"line\">      \\---tags</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tree</span> test /A /F</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">  |   config</span><br><span class=\"line\">  |   description</span><br><span class=\"line\">  |   HEAD</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +---hooks</span><br><span class=\"line\">  |       applypatch-msg.sample</span><br><span class=\"line\">  |       commit-msg.sample</span><br><span class=\"line\">  |       fsmonitor-watchman.sample</span><br><span class=\"line\">  |       post-update.sample</span><br><span class=\"line\">  |       pre-applypatch.sample</span><br><span class=\"line\">  |       pre-commit.sample</span><br><span class=\"line\">  |       pre-merge-commit.sample</span><br><span class=\"line\">  |       pre-push.sample</span><br><span class=\"line\">  |       pre-rebase.sample</span><br><span class=\"line\">  |       pre-receive.sample</span><br><span class=\"line\">  |       prepare-commit-msg.sample</span><br><span class=\"line\">  |       push-to-checkout.sample</span><br><span class=\"line\">  |       update.sample</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +---info</span><br><span class=\"line\">  |       exclude</span><br><span class=\"line\">  |</span><br><span class=\"line\">  +---objects</span><br><span class=\"line\">  |   +---info</span><br><span class=\"line\">  |   \\---pack</span><br><span class=\"line\">  \\---refs</span><br><span class=\"line\">      +---heads</span><br><span class=\"line\">      \\---tags</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "记录"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/git-tag-release-distinction.html",
            "url": "https://blog.imlete.cn/article/git-tag-release-distinction.html",
            "title": "git中tag与release的创建以及两者的区别",
            "date_published": "2022-04-03T15:54:38.000Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文未经过<strong>原文作者转载许可</strong>，全由博主一人擅自抄录到本博客，博主只是觉得原文作者写的很好，所以将其收录到自己的博客内，以便博主本人日后对该知识有所遗忘时，能在自己的博客内自行查阅，再此感谢<strong>原文作者</strong>写的这篇好文。如有侵权，请联系删除</p>\n<blockquote>\n<p>本文可能于原文有所不同，不过版权依然归<strong>原文作者</strong>所有</p>\n</blockquote>\n<blockquote>\n<p>原文地址: <a href=\"https://www.jianshu.com/p/79ecf4fe5079\">https://www.jianshu.com/p/79ecf4fe5079</a></p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>标签（tag）是特定提交（commit)一个指针，也就是每个 tag 对应一个特定的 commit。</p>\n<p>Release 是具有 changelogs 和二进制文件的一级对象，它可以代表超出 Git 架构本身的一个特定时间点之前的所有项目历史。也就是通过 release，不但能够通过源码体现出项目历史，还能通过已经编译好的二进制文件来进一步描述此时的项目状态。“超出 Git 架构本身“的意思则在于，git 本身只能记录项目修改，本质上不适合将编译好的项目二进制文件记录下来。而通过 release 则把项目二进制文件保存了下来，方便用户下载，也方便查找特定版本的二进制文件。</p>\n<p>以下是<a href=\"https://github.com/blog/1547-release-your-software\">Github official announcement</a>所定义原文：</p>\n<blockquote>\n<p>eleases are first-class objects with changelogs and binary assets that present a full project history beyond Git artifacts.</p>\n</blockquote>\n<h2 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h2><p>Release 分为两种：lightweight and annotated.</p>\n<p>创建 lightweight 类型的 tag：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag v1.4-lw</span><br></pre></td></tr></table></figure>\n\n<p>创建 annotated 类型的 tag：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v1.4 -m <span class=\"string\">&quot;my version 1.4&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 tag 可以返回到项目的特定状态下，所以可以将 tag 看作是在大量 commit 中设定的书签。</p>\n<p>创建 release，则需要通过源码托管商的网页操作界面来进行，一般会要求填写 tag 名、分支以及相应的发布说明，还可上传编译好的程序、打包好的文件等。</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>标签是 git 中的概念，而 release 则是 Github、码云等源码托管商所提供的更高层的概念。也就是说 git 本身是没有 release 这个概念的，只有 tag。</p>\n<p>两者之间的关系则是，release 基于 tag，为 tag 添加更丰富的信息，一般是编译好的文件。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Release 是源码托管商对 git 的 tag 功能的增强。通过 git 提供的 tag 功能，我们可以给项目进行版本标识，以识别特定的版本，如<code>v0.1.0</code>、<code>v1.0.0</code>等。而通过源码托管商提供的 release 功能，在 tag 的基础上我们可以添加编译好的二进制文件等，如<code>.deb</code>、<code>.exe</code>等给特定的版本提供更多的信息，方便用户，也方便后期查找特定版本的程序。</p>\n",
            "tags": [
                "记录",
                "Git"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Vercel-Use-HTTP-Cache.html",
            "url": "https://blog.imlete.cn/article/Vercel-Use-HTTP-Cache.html",
            "title": "Vercel 使用 HTTP 缓存",
            "date_published": "2022-03-23T21:24:26.000Z",
            "content_html": "<p>近期也是闲得无聊，就翻一翻<a href=\"https://vercel.com\">Vercel</a>文档，于是我发现，它居然能自定义设置响应头(静态文件部署居然可以)</p>\n<blockquote>\n<p>在我个人的角度，我以为只有使用 ServerLess 才能用 http 的响应对象指定响应头信息，没想到 Vercel 居然可以直接通过<code>vercel.json</code>文件指定配置</p>\n</blockquote>\n<p>那我部署的博客(或其它静态站点)岂不是可以启动 http 缓存了？</p>\n<p>Vercel 文档: <a href=\"https://vercel.com/docs/project-configuration#project-configuration/headers\">https://vercel.com/docs/project-configuration#project-configuration/headers</a></p>\n<p>以下是本站的使用的<code>vercel.json</code>文件信息(缓存开启了 1 天)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/sw.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Cache-Control&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;public, max-age=0, must-revalidate&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;(.*)&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Cache-Control&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;public, s-maxage=86400, max-age=86400&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "记录",
                "Cache",
                "Vercel",
                "HTTP"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/win11-port-occupy.html",
            "url": "https://blog.imlete.cn/article/win11-port-occupy.html",
            "title": "更新win11系统后端口被占用",
            "date_published": "2022-03-18T20:32:55.000Z",
            "content_html": "<blockquote>\n<p>虽然本文的确是有点短，但这仅仅是博主记录一些不常用的功能或者是方便以后查阅</p>\n</blockquote>\n<p>更新到 win11 后偶尔会遇到端口被占用的问题，例如 hexo 启动的 4000 端口有时候也会被占用，这么都关不掉，用 kill 命令也关不掉，具体参考:<a href=\"https://blog.csdn.net/qq892601059/article/details/120898283\">记一次 Clash 端口为 0 的问题</a></p>\n<p>这种现象出现的记录并不是很频繁，阶段性的产生，据说是开启了<code>hyper-V</code>后产生的，具体的博主也不清楚。</p>\n<p>执行如下命令即可(以管理员身份允许 CMD)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net stop winnat &amp;&amp; net start winnat</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "记录"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Windows-Linux-SubSystem.html",
            "url": "https://blog.imlete.cn/article/Windows-Linux-SubSystem.html",
            "title": "Windows安装Linux子系统",
            "date_published": "2021-11-13T09:40:50.000Z",
            "content_html": "<h2 id=\"废话\"><a href=\"#废话\" class=\"headerlink\" title=\"废话\"></a>废话</h2><p>在写了项目后，需要放到服务器上去运行测试，但仅仅是为了测试也没不要去掏钱买个服务器来进行测试(我觉得挺贵的)<br>本地电脑开个 VM 虚拟机？太吃配置了，而且启动速度还贼慢<br>直到最近我才知道 Windows 可以看起 Linux 之系统，于是就尝试了一下，于是我就写了这篇文章记录一下<br>官方文档: <a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-on-server\">https://docs.microsoft.com/zh-cn/windows/wsl/install-on-server</a></p>\n<p>适用于 Linux 的 Windows 子系统可供在 Windows Server 2019（版本 1709）和更高版本上安装。<br>本文记录我是如何在 Windows 上启用 WSL 的步骤。并安装 Ubuntu 子系统的</p>\n<p>必须启用<code>适用于 Linux 的 Windows 子系统</code>可选功能并重启，然后才能在 Windows 上运行 Linux 发行版。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>启动<code>适用于 Linux 的 Windows 子系统</code>服务<br>以管理员身份打开 PowerShell 并运行：</p>\n<blockquote>\n<p>注意是以管理员身份运行</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Enable-WindowsOptionalFeature</span> <span class=\"literal\">-Online</span> <span class=\"literal\">-FeatureName</span> Microsoft<span class=\"literal\">-Windows-Subsystem-Linux</span></span><br></pre></td></tr></table></figure>\n\n<p>上方是以命令的方式开启<code>适用于 Linux 的 Windows 子系统</code>，如果不行的话你可以手动开启</p>\n<p>按 win 键直接输入(或者打开设置搜索也一样)<code>启用或关闭 Windows 功能</code>并打开找到<code>适用于 Linux 的 Windows 子系统</code>选项勾选后点击<code>确定</code>稍等一会儿会弹出以可框，会提示你重启电脑</p>\n<h3 id=\"安装-Linux-子系统\"><a href=\"#安装-Linux-子系统\" class=\"headerlink\" title=\"安装 Linux 子系统\"></a>安装 Linux 子系统</h3><blockquote>\n<p>如果按安装过程中遇到任何问题，可多重试两边<br>如果依旧报错失败，可以到系统设置中(设置中开发者选项的未知可能在不同版本中出现的位置不同)<code>隐私和安全性</code>—&gt;<code>开发者选项</code>开启开启开发者，随后重新安装<br>如果还不行，则重启电脑后再试试</p>\n</blockquote>\n<blockquote>\n<p>自动安装直接到 <code>Microsoft Store</code> 搜索<code>Ubuntu</code> 进行下载即可(版本就随便你啦)<br>不过自动安装会直接安装到 C 盘，用的时间长了会堆积很多文件，导致 C 盘爆红，所以我更建议手动安装(不难)</p>\n</blockquote>\n<p>这里只描述如何手动安装 Ubuntu 子系统，好处就是能自定义安装路径，不会占用 C 盘空间</p>\n<blockquote>\n<p>博主下载的是<code>Ubuntu 20.04</code>发行版<br>系统下载地址如下: <a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install-manual#downloading-distributions\">官方发行版下载地址</a></p>\n</blockquote>\n<p>下载下来后，(剪切或复制随便你)复制到你想要安装的路径下，修改后缀名为<code>.zip</code>解压，运行<code>ubuntu2004.exe</code>即可</p>\n<p>进入后会让你输入用户名和密码，自己写一个就行了</p>\n<p>随后就是修改 root 的密码，输入<code>su root</code>或者是<code>sudo pass</code>跟着提示输入即可</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，你就有了一个本地的 Linux 测试环境，因为这个子系统是和主系统联通的，用到的 ip 也是和主系统一样的</p>\n<p>输入<code>ls</code> 可以看到有个<code>mnt</code>目录，进入后就可以看到主系统的盘符，他们是互通的</p>\n",
            "tags": [
                "记录",
                "Windows",
                "Linux"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/async-await-error-handling.html",
            "url": "https://blog.imlete.cn/article/async-await-error-handling.html",
            "title": "如何优雅的处理async/await错误信息",
            "date_published": "2021-11-12T16:42:37.000Z",
            "content_html": "<h2 id=\"废话\"><a href=\"#废话\" class=\"headerlink\" title=\"废话\"></a>废话</h2><p>在实际开发中，用到了一些异步函数或是请求。你可能会写<code>.then()</code>和<code>.catch()</code>来处理异步的成功与失败<br>那么如果这个<code>.then()</code>里又有一个请求，那么时不时又得写<code>.then()</code>和<code>.catch()</code>，那么很有可能<code>.catch()</code>里也有呢？</p>\n<blockquote>\n<p>这里就不多说什么回调地狱的问题了<br>你可能就会用<code>async</code>和<code>await</code>来处理异步请求，但这也就会随着产生一个问题，那就是<code>await</code>它无法捕获异步请求的错误啊</p>\n</blockquote>\n<p>这时你又想到，那我包一层<code>try...catch</code>不就好了吗？<br>但是这仅仅只能处理当前这个方法的错误，如果这个方法里又多个请求或者说是其他同步代码产生的问题，错误也只能定位到这个方法。<br><code>try...catch</code>对代码的可读性不是很友好(个人觉得)</p>\n<blockquote>\n<p>如果你觉得上面所说的，你觉得很 ok，就是要用上面说的<code>try...catch</code>还是<code>.then()</code>和<code>.catch()</code>，就随便你<br>萝卜青菜，各有所爱(你想用啥就用啥)</p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>现在有如下代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成功</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Success</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;Run Success&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 失败</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UnSuccess</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Run Error&quot;</span>));</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title class_\">Success</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"then-catch\"><a href=\"#then-catch\" class=\"headerlink\" title=\"then-catch\"></a>then-catch</h2><p>用<code>.then()</code>和<code>.catch()</code>来处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">UnSuccess</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, res);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try-catch\"></a>try-catch</h2><p>用<code>try...catch</code>来处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> <span class=\"title class_\">UnSuccess</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"then-catch-结构赋值\"><a href=\"#then-catch-结构赋值\" class=\"headerlink\" title=\"then-catch 结构赋值\"></a>then-catch 结构赋值</h2><p><code>.then()</code>和<code>.catch()</code>联合<code>结构赋值</code>来处理</p>\n<blockquote>\n<p>这种方式仅仅是简化了<code>.then()</code>和<code>.catch()</code>方式而已</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [err, result] = <span class=\"keyword\">await</span> <span class=\"title class_\">UnSuccess</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> [<span class=\"literal\">null</span>, result])</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"封装-then-catch-结构赋值\"><a href=\"#封装-then-catch-结构赋值\" class=\"headerlink\" title=\"封装 then-catch 结构赋值\"></a>封装 then-catch 结构赋值</h2><p>简单的封装以下就可用在很多地方进行复用了</p>\n<blockquote>\n<p>根前面的代码对比时不时好了很多？</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Promise函数错误处理</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Function</span>&#125; asyncFn 这是一个Promise函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Array</span>&#125; [err,result]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">AsyncHandling</span>(<span class=\"params\">asyncFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">asyncFn</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> [<span class=\"literal\">null</span>, result])</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [err, result] = <span class=\"keyword\">await</span> <span class=\"title class_\">AsyncHandling</span>(<span class=\"title class_\">UnSuccess</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生了错误！&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;result:&quot;</span>, result);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不管你用什么方式都可用，看你喜欢什么风格的编码方式<br>此篇文章只是提供更多的方式来解决实际开发中的问题<br>如果你有更好的方式欢迎留言评论</p>\n",
            "tags": [
                "记录",
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/Get-Property.html",
            "url": "https://blog.imlete.cn/article/Get-Property.html",
            "title": "JavaScript动态获取对象二级(多级)属性(值)的几种方法",
            "date_published": "2021-11-07T20:01:29.000Z",
            "content_html": "<blockquote>\n<p>推荐最后一种自定义函数方法</p>\n</blockquote>\n<p>在一些特殊情况下，对象是动态的，它可用是一级、二级、多级对象，这是不规整的<br>那么如何获取这种动态属性的对象属性值呢？</p>\n<p>例如有如下对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">lisi</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test-age&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">hobby</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;写代码&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;打篮球&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Games</span>: [<span class=\"string\">&quot;英雄联盟&quot;</span>, <span class=\"string\">&quot;古墓丽影&quot;</span>, <span class=\"string\">&quot;神秘海域&quot;</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> key1 = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> key2 = <span class=\"string\">&quot;age&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> key3 = <span class=\"string\">&quot;lisi.age&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下输出全为 undefined ; 因为 obj 内压根就没有key1~key3这个3属性</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">key1</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">key2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">key3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 静态获取(一般正常方式) 不过这种方式有一定缺陷，例如无法获取 test-age</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">lisi</span>.<span class=\"property\">age</span>); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(obj.lisi.test-age); // 语法报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 动态获取; 可解决上方无法获取 test-age的问题</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">lisi</span>[<span class=\"string\">&quot;test-age&quot;</span>]); <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[key1].<span class=\"property\">age</span>); <span class=\"comment\">// 18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[key1][key2]); <span class=\"comment\">// 18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为什么会是undefined？ 因为obj内没有 lisi.age (lisi.age被视为一个key，即test-age相同)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj[key3]); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用eval函数动态获取(既然是动态获取test-age也是没问题的)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">eval</span>(<span class=\"string\">`obj.<span class=\"subst\">$&#123;key1&#125;</span>.age`</span>)); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">eval</span>(<span class=\"string\">`obj.<span class=\"subst\">$&#123;key1&#125;</span>.<span class=\"subst\">$&#123;key2&#125;</span>`</span>)); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"built_in\">eval</span>(<span class=\"string\">&quot;obj.&quot;</span> + key3)); <span class=\"comment\">// 18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 Function 动态获取 (此方法在浏览器控制台可用，但是放到nodejs里就不行了，目前我还不知道是什么情况)</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(new Function(&quot;return &quot; + (&quot;obj.&quot; + key1))());</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义函数(推荐)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">GetProperty</span>(<span class=\"params\">obj, str</span>) &#123;</span><br><span class=\"line\">  str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[(\\w+)\\]/g</span>, <span class=\"string\">&quot;.$1&quot;</span>); <span class=\"comment\">// 处理数组下标</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    obj = obj[arr[i]] || <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">GetProperty</span>(obj, key3)); <span class=\"comment\">// 18</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">GetProperty</span>(obj, <span class=\"string\">&quot;lisi.test-age&quot;</span>)); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">GetProperty</span>(obj, <span class=\"string\">&quot;lisi.hobby[2].Games[1]&quot;</span>)); <span class=\"comment\">// 古墓丽影</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "记录",
                "JavaScript"
            ]
        },
        {
            "id": "https://blog.imlete.cn/article/FreeMove.html",
            "url": "https://blog.imlete.cn/article/FreeMove.html",
            "title": "C盘无损移动文件",
            "date_published": "2021-11-06T15:44:32.000Z",
            "content_html": "<p>在一些特殊的情况下，某些软件在安装的过程中并没有给你指明安装路径或是按钮设计的很隐秘，又或者说是你不注意就点击下一步下一步就安装上了。(一般重新安装即可解决)</p>\n<p>甚至是有些软件是你用了很久的，导致这种文件堆积到C盘，导致越用越多，时不时C盘就爆红，还得定期清理，太麻烦了</p>\n<p>那有什么办法可用解决这个问题吗？答案是有的</p>\n<p>有些人可能知道<a href=\"https://github.com/imDema/FreeMove\">FreeMove</a>这款开源软件，这是一个很老的项目了，并且作者已经很久没有更新了，但用用来简单的以用一些文件、文件夹、软件安装路径也是没问题的</p>\n<blockquote>\n<p>我也用过，但对于我来说，目前也不是太大作用，也不是实时使用的软件，可能一年两年才会用一次，然后就不知道丢到哪个文件夹里吃灰去了，在想起来要用是，找起来也是比较耗时(或者去gtihub下载一个)</p>\n</blockquote>\n<p>现在就不用这款软件了，直接使用一行命令即可实现，也不难记<code>mklink</code>命令</p>\n<p>打开命令行输入<code>mklink</code>命令即可查看详细的内容介绍<br><img src=\"/img/FreeMove/1.png\" alt=\"mklink command\"></p>\n<p>这里我们会用到<code>mklink /d</code>这个命令进行对文件的链接 <a href=\"https://zh.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5#Windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\">详细内容</a></p>\n<p>假设我现在需要将<code>G:\\Desktop\\test1</code>链接到<code>G:\\Desktop\\test2</code>，之后我打开<code>G:\\Desktop\\test1</code>这个文件夹时就会链接到<code>G:\\Desktop\\test2</code>(实则是打开了test2文件夹，相当于快捷方式)</p>\n<blockquote>\n<p>我为什么用双引号跨起来呢？<br>为了保证命令行能够识别出完整的路径，所有需要括起来(一些特殊情况下有些文件路径是存在空格等一些特殊字符的)</p>\n</blockquote>\n<p>在执行命令之前，你需要将<code>原文件夹</code>剪切到<code>目标路径</code>后再执行目录，否则会提示文件已存在，可参考如下图所示</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mklink /d 原路径 目标路径</span></span><br><span class=\"line\">mklink /d <span class=\"string\">&quot;G:\\Desktop\\test1&quot;</span> <span class=\"string\">&quot;G:\\Desktop\\test2&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/img/FreeMove/2.png\" alt=\"mklink free move command\"></p>\n<p>自此就已经将文件移动好了</p>\n<blockquote>\n<p>绝对不能用来移动系统文件，否则后果自负</p>\n</blockquote>\n",
            "tags": [
                "记录"
            ]
        }
    ]
}