<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.imlete.cn</id>
    <title>Lete乐特 &#39;s Blog • Posts by &#34;css&#34; tag</title>
    <link href="https://blog.imlete.cn" />
    <updated>2022-05-12T11:51:45.000Z</updated>
    <category term="CSS" />
    <category term="记录" />
    <category term="JavaScript" />
    <category term="Git" />
    <category term="教程" />
    <category term="HTML" />
    <category term="CDN" />
    <category term="Github" />
    <category term="Jsdeliver" />
    <category term="SEO" />
    <category term="Hexo" />
    <category term="Yilia" />
    <category term="Valine" />
    <category term="Live2d" />
    <category term="Config" />
    <category term="LeanCloud" />
    <category term="IDEA" />
    <category term="Maven" />
    <category term="Java" />
    <category term="SpringBoot" />
    <category term="Thymeleaf" />
    <category term="java" />
    <category term="源码" />
    <category term="软件" />
    <category term="MyBatis" />
    <category term="SSM" />
    <category term="Gzip" />
    <category term="JQuery" />
    <category term="Node" />
    <category term="Cache" />
    <category term="Vue" />
    <category term="TypeScript" />
    <category term="Vercel" />
    <category term="HTTP" />
    <category term="Typecho" />
    <category term="Blog" />
    <category term="Webpack" />
    <category term="Windows" />
    <category term="Linux" />
    <category term="PhotoShop" />
    <category term="抠图" />
    <category term="VSCode" />
    <category term="jsdelivr" />
    <category term="C#" />
    <category term="Google Chrome" />
    <category term="谷歌插件" />
    <category term="Google-Chrome" />
    <entry>
        <id>https://blog.imlete.cn/article/Static-resource-cache-control.html</id>
        <title>前端优化之静态资源缓存控制</title>
        <link rel="alternate" href="https://blog.imlete.cn/article/Static-resource-cache-control.html"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文转自&lt;a href=&#34;https://www.zhihu.com/question/20790576/answer/32602154&#34;&gt;@张云龙&lt;/a&gt;，于 2014 年 10 月在知乎上的一个问题回答，博主觉得这位大佬写的很好，也很详细，于是就把内容搬到了自己的博客上，便于以后自己查阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;太长不想看&#34;&gt;&lt;a href=&#34;#太长不想看&#34; class=&#34;headerlink&#34; title=&#34;太长不想看&#34;&gt;&lt;/a&gt;太长不想看&lt;/h2&gt;&lt;p&gt;使用强制缓存如何，如何让用户能够及时使用最新修改后的静态资源？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改资源文件名&lt;code&gt;index-v1.css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改资源文件名，并且对文件内容生成 hash 值(内容改变，则 hash 改变反之不改变)(&lt;code&gt;index.v1tg6l.css&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;为资源添加请求参数(该参数没有任何作用，只是为了修改 url 地址)与第二条一样生成 hash(&lt;code&gt;index.css?v=qb6l0p&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;总结: 只要修改了资源请求的 url 地址，那么就会获取最新修改的静态资源，从而主动弃用旧静态资源&lt;br&gt;很多大网站都会使用这种方式，例如 baidu，taobao&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是-HTTP-缓存&#34;&gt;&lt;a href=&#34;#什么是-HTTP-缓存&#34; class=&#34;headerlink&#34; title=&#34;什么是 HTTP 缓存&#34;&gt;&lt;/a&gt;什么是 HTTP 缓存&lt;/h2&gt;&lt;p&gt;HTTP 缓存分为两种(本文不会深究响应头的众多参数)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强制缓存: (状态码始终 200)在规定时间内，不用向服务器发送请求，直接使用本地缓存(超过规定时间后才会重新向服务器发送请求获取资源)&lt;/li&gt;
&lt;li&gt;协商缓存: (状态码过期 200，未过期 304)每次都会向服务器确认，这个本地资源有没有过期，过期: 服务器返回新资源。未过期: 让浏览器使用本地缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;&lt;a href=&#34;#正文&#34; class=&#34;headerlink&#34; title=&#34;正文&#34;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;使用强制缓存如何，如何让用户能够及时使用最新修改后的静态资源？&lt;/p&gt;
&lt;p&gt;这是一个普通网站的结构&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;访问这个网站，可以看到网络请求状态，响应状态 200，这是在正常不过的事了&lt;br&gt;那就看看&lt;code&gt;a.css&lt;/code&gt;的请求吧，如果每次用户访问页面都要加载，是不是很影响性能，很浪费带宽啊&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们希望最好这样,利用 304，让浏览器使用本地缓存。但，这样就够了吗？不成！&lt;strong&gt;304 叫协商缓存&lt;/strong&gt;，这玩意儿还是需要向浏览器发送一个请求，问问服务器这个资源有没有更新&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新: 返回新资源&lt;br&gt;没更新: 告诉浏览器使用本地缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;/img/Static-resource-cache-control/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;strong&gt;强制缓存（cache-control/expires）&lt;/strong&gt;让浏览器不要向服务器发送请求了&lt;br&gt;所以必须彻底灭掉这个请求，变成这样&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;那问题来了：这都不让浏览器发资源请求了，这缓存咋更新？&lt;br&gt;可以通过更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;下次上线资源的时候，把链接地址改成新的版本，这就能更新资源了&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;页面引用了 3 个 css，而某次上线只改了其中的 a.css，如果所有链接都更新版本(当然你如果只改 a 的链接地址就可以了，不过我们还是要继续讨论后续问题)，就会导致 b.css，c.css 的缓存也失效，那岂不是又有浪费了？！&lt;br&gt;要解决这种问题，必须让 url 的修改与文件内容关联，也就是说，只有文件内容变化，才会导致相应 url 的变更，从而实现文件级别的精确缓存控制。&lt;/p&gt;
&lt;p&gt;可以使用&lt;strong&gt;数据摘要算法&lt;/strong&gt;，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了&lt;/p&gt;
&lt;p&gt;这回再有文件修改，就只更新那个文件对应的 url 了，想到这里貌似很完美了&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现代互联网企业，为了进一步提升网站性能，会把静态资源和动态网页分集群部署，静态资源会被部署到 CDN 节点上，网页中引用的资源也会变成对应的部署路径&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;好了，当我要更新静态资源的时候，同时也会更新 html 中的引用吧，就好像这样&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是这会产生一个问题，如何保证页面与资源保持一致呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先部署页面，再部署资源&lt;ul&gt;
&lt;li&gt;在二者部署的时间间隔内，如果有用户访问页面，就会在新的页面结构中加载旧的资源，并且把这个旧版本的资源当做新版本缓存起来，其结果就是：用户访问到了一个样式错乱的页面，除非手动刷新，否则在资源缓存过期之前，页面会一直执行错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先部署资源，再部署页面&lt;ul&gt;
&lt;li&gt;在部署时间间隔之内，有旧版本资源本地缓存的用户访问网站，由于请求的页面是旧版本的，资源引用没有改变，浏览器将直接使用本地缓存，这种情况下页面展现正常；但没有本地缓存或者缓存过期的用户访问网站，就会出现旧版本页面加载新版本资源的情况，导致页面执行错误，但当页面完成部署，这部分用户再次访问页面又会恢复正常了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;简而言之: 先部署谁都不成！都会导致部署过程中发生页面错乱的问题。&lt;br&gt;所以，访问量不大的项目，可以让研发同学苦逼一把，等到半夜偷偷上线，先上静态资源，再部署页面，看起来问题少一些。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是如果你现在正在维护一个用户访问量比较大的网站，改怎么办，你打算不解决了吗？&lt;/p&gt;
&lt;p&gt;可以采用&lt;strong&gt;非覆盖式发布&lt;/strong&gt;，前面我们说了那么多都是&lt;strong&gt;覆盖式发布&lt;/strong&gt;&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;全套做下来，就是相对比较完整的静态资源缓存控制方案了，而且，还要注意的是，静态资源的缓存控制要求在前端所有静态资源加载的位置都要做这样的处理。是的，所有！什么 js、css 自不必说，还要包括 js、css 文件中引用的资源路径，由于涉及到摘要信息，引用资源的摘要信息也会引起引用文件本身的内容改变，从而形成级联的摘要变化，大概就是如下图&lt;br&gt;&lt;img src=&#34;/img/Static-resource-cache-control/11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</content>
        <category term="CSS" />
        <category term="JavaScript" />
        <category term="HTML" />
        <category term="Cache" />
        <updated>2022-05-12T11:51:45.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.imlete.cn/article/CSS-units.html</id>
        <title>CSS单位你真的了解吗？</title>
        <link rel="alternate" href="https://blog.imlete.cn/article/CSS-units.html"/>
        <content type="html">&lt;p&gt;CSS 常见单位：px、%、em、rem、vh、vw&lt;br&gt;全部单位：%、px、cm、mm、in、pt、pc、ch、em、 ex、rem、vh、vw、vmin、vmax&lt;/p&gt;
&lt;p&gt;本文主要内容只会讲解常见 css 单位，并不会过深的去探讨(学而用不到，很快就会忘记)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;单位&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;px&lt;/td&gt;
&lt;td&gt;像素(Pixel)是相对长度单位，px 是相对于显示器屏幕分辨率而言的单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;em&lt;/td&gt;
&lt;td&gt;em 的值并不是固定的，他会继承父级元素的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rem&lt;/td&gt;
&lt;td&gt;rem 是 CSS3 新增的一个相对单位（root em，根 em）,表示 rem 会相对于 html 根元素，而 em 是相对于父元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vh&lt;/td&gt;
&lt;td&gt;视图窗口的高度(viewport heigth)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vw&lt;/td&gt;
&lt;td&gt;视图窗口的宽度(viewport width)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;code&gt;1px&lt;/code&gt;：是相对单位，不管窗体怎么变化，它都是定死的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1%&lt;/code&gt;：是相对单位，它是相对于父元素的百分比，举例：父元素宽度为 100px，子元素设置 50%，那么子元素是父元素的一半(50px)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;em&lt;/code&gt;：是相对单位，它是相对于父元素的，举例：父元素字体大小为 20px，子元素设置 2em，那么子元素 40px。如果直接在 body 里使用，而为修改过 body 的默认大小，那么 html 的默认大小是 14px，如果写 2em 的话就是 28px&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rem&lt;/code&gt;：是相对单位，它是相对于根(root em)的缩写，相对于根元素的大小，与 em 不同的是 em 是相对与父元素指定的大小，而 rem 是相对于根元素大小&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vh&lt;/code&gt;：是相对单位，它是相对与窗体高度(也就是浏览器显示区域的高度)，举例：如果你现在使用手机浏览，假设手机高 200px,宽 100px，那么 1vh=20px，1vw=10px&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vw&lt;/code&gt;：是相对单位，它是相对与窗体宽度(也就是浏览器显示区域的宽度)，举例：同上 vh&lt;/p&gt;
</content>
        <category term="CSS" />
        <category term="记录" />
        <updated>2021-07-17T11:30:17.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.imlete.cn/article/Css-Anchor-scroll.html</id>
        <title>使用Css实现与JavaScript相同的丝滑锚点滚动效果</title>
        <link rel="alternate" href="https://blog.imlete.cn/article/Css-Anchor-scroll.html"/>
        <content type="html">&lt;p&gt;曾经我认为网站的锚点滚动效果都是使用Javscript实现的，如果不用js实现的话就是一瞬间就跳转到了，用户体验较差&lt;br&gt;看了大部分网站都是用js实现的，直到我写了Hexo的&lt;a href=&#34;https://mengd.js.org&#34;&gt;Hexo-MengD(萌典)&lt;/a&gt;主题后&lt;br&gt;了解到了很多前端更深层的一些知识，我才知道原来这种效果可以使用css实现，甚至只需要一行即可实现，而如果使用的是js实现的话，少则&lt;code&gt;50行&lt;/code&gt;代码、多则&lt;code&gt;100+行&lt;/code&gt;代码&lt;br&gt;现在就只需要一行css就能实现，而且css的效率是完全吊打js的&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;html&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scroll-behavior: smooth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就给html标签添加一个css属性样式就可以了，没了(是不是很震惊？)&lt;/p&gt;
</content>
        <category term="CSS" />
        <category term="JavaScript" />
        <updated>2021-05-04T10:42:07.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.imlete.cn/article/a5ef8356.html</id>
        <title>CSS修改滚动条颜色样式(右边滚动条、底部滚动条、div内滚动条)</title>
        <link rel="alternate" href="https://blog.imlete.cn/article/a5ef8356.html"/>
        <content type="html">&lt;h2 id=&#34;如下&#34;&gt;&lt;a href=&#34;#如下&#34; class=&#34;headerlink&#34; title=&#34;如下&#34;&gt;&lt;/a&gt;如下&lt;/h2&gt;&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 滚动条宽度 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::-webkit-scrollbar&amp;#123;&lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;1px&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 滚动条轨道颜色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::-webkit-scrollbar-track&amp;#123;&lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;#000&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 滚动条颜色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::-webkit-scrollbar-thumb&amp;#123;&lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;#000&lt;/span&gt;;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 鼠标移动到滚动条上后显示的颜色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::-webkit-scrollbar-thumb:hover &amp;#123;&lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;#000&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 点击时滚动条的颜色 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;::-webkit-scrollbar-thumb:active &amp;#123;&lt;span class=&#34;attribute&#34;&gt;background-color&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;#000&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;【Lete乐特个人博客】：https-lete114-now-sh&#34;&gt;&lt;a href=&#34;#【Lete乐特个人博客】：https-lete114-now-sh&#34; class=&#34;headerlink&#34; title=&#34;【Lete乐特个人博客】：https://lete114.now.sh&#34;&gt;&lt;/a&gt;【Lete乐特个人博客】：&lt;a href=&#34;https://lete114.now.sh&#34;&gt;https://lete114.now.sh&lt;/a&gt;&lt;/h3&gt;</content>
        <category term="CSS" />
        <updated>2020-05-18T14:10:52.000Z</updated>
    </entry>
</feed>
