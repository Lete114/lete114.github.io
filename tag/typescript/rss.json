{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lete乐特 's Blog • All posts by \"typescript\" tag",
    "description": "我相信我可以，但我一直在路上，所以我有无限的可能！！",
    "home_page_url": "https://blog.imlete.cn",
    "items": [
        {
            "id": "https://blog.imlete.cn/article/build-ts-doc.html",
            "url": "https://blog.imlete.cn/article/build-ts-doc.html",
            "title": "如何为自己的js项目生成API文档",
            "date_published": "2022-06-06T15:52:50.000Z",
            "content_html": "<p>如题，当自己写完了一个第三方库，准备发布时，总不能直接把一些使用方法以及传参说明写在<code>README.md</code>里吧</p>\n<p>看到许多第三方库都有一个<code>.d.ts</code>文件，当我们使用这些第三方库时，在方法上安装<code>ctrl+鼠标左键</code>时就会跳转到对应<code>.d.ts</code>说明文档中</p>\n<p>那么这个是咱们做的呢？难道是手动创建并编写的吗？不是吧？如果是手动创建的话，哪些大型项目那么多方法和文件模块，并且还是多人协作开发，不可能同步如此庞大的<code>.d.ts</code>文件，那么这个是怎么做的呢？</p>\n<p>这个是使用<code>TypeScript</code>生成的，不是吧？那我用的不是<code>TypeScript</code>写的库不就不能生成了？</p>\n<p>非也非也，即使不是用<code>TypeScript</code>写的项目也能生成<code>.d.ts</code>文件</p>\n<p>只要你写的时候在方法上添加注释即可，注释关键字必须遵循<a href=\"https://jsdoc.app/\">JSDoc</a></p>\n<p>JSDoc 中有很多关键字，这些关键字想必你多多少少会在其它第三方库的<code>.d.ts</code>文件中见过，如: <code>@param</code> <code>@returns</code> <code>@author</code>等，更多具体的请自行在<a href=\"https://jsdoc.app/\">JSDoc</a>中查看</p>\n<p>说了那么多，那么到底如何生成<code>.d.ts</code>文档呢？</p>\n<p>举例我目前有一个<code>/src/main.js</code>，其中代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代码来源于: https://github.com/Lete114/CardLink/blob/f4ab08b78625244d9515743e41c7e04f839e149f/src/main.js#L12</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if it is a [&#x27;https://&#x27;, &#x27;http://&#x27;, &#x27;//&#x27;] protocol</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; url Website url</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isHttp</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"regexp\">/^(https?:)?\\/\\//g</span>.<span class=\"title function_\">test</span>(url)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只需一行命令即可，使用 npx 临时安装<code>typescript</code>，并调用<code>typescript</code>的命令生成<code>.d.ts</code>文档</p>\n<blockquote>\n<p>注意其中<code>-p</code>是 npx 的命令，原名<code>--package</code>，具体请看官网<a href=\"https://docs.npmjs.com/cli/v8/commands/npx\">https://docs.npmjs.com/cli/v8/commands/npx</a></p>\n</blockquote>\n<ul>\n<li><code>src/**/*.js</code>: 对 src 目录下的所有 js 文件生成<code>.d.ts</code>文件</li>\n<li><code>--declaration</code>: 生成相应的<code>.d.ts</code>文件</li>\n<li><code>--allowJs</code>: 允许编译 javascript 文件</li>\n<li><code>--emitDeclarationOnly</code>: 只输出 <code>.d.ts</code> 文件，不输出 JavaScript 文件</li>\n<li><code>--outDir</code>: 输出到指定的目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx -p typescript tsc src/**.js --declaration --allowJs --emitDeclarationOnly --outDir types</span><br></pre></td></tr></table></figure>\n\n<p>执行如上命令后就会先下载<code>typescript</code>，然后执行 tsc 命令，构建生成<code>.d.ts</code> 文件到<code>types/main.d.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 代码来源于: https://github.com/Lete114/CardLink/blob/f4ab08b78625244d9515743e41c7e04f839e149f/src/main.js#L12</span></span><br><span class=\"line\"><span class=\"comment\"> * Determine if it is a [&#x27;https://&#x27;, &#x27;http://&#x27;, &#x27;//&#x27;] protocol</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; url Website url</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">isHttp</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "TypeScript"
            ]
        }
    ]
}