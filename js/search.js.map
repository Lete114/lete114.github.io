{"version":3,"names":["$","Selector","el","document","querySelector","path","currentScript","getAttribute","input","history","history_list","clear","result","storage","JSON","parse","localStorage","getItem","reverse","addEventListener","setItem","length","innerHTML","style","history_list_cdf","createDocumentFragment","forEach","history_item","item","createElement","className","innerText","value","dispatchEvent","Event","appendChild","response","fetch","datas","json","map","content","compressed","f","String","fromCharCode","resetValue","i","w","bits","resb","maxpower","power","c","dictionary","enlargeIn","dictSize","numBits","entry","data","val","charCodeAt","position","index","Math","pow","next","push","join","charAt","ZLStringDecompress","trim","keywords","split","cdf","ul","isMatch","title","dataTitle","dataContent","replace","toLowerCase","dataUrl","url","startsWith","indexTitle","indexContent","firstOccur","keyword","indexOf","start","end","matchContent","substring","reg","RegExp","key","li","a","p","href","includes","stringify"],"sources":["search.js.map"],"sourcesContent":["!(async () => {\n  /**\n   * @param { string } Selector\n   * @param { Element } el\n   * @returns { Element }\n   */\n  const $ = (Selector, el) => (el || document).querySelector(Selector)\n\n  const currentScript = document.currentScript\n  const path = currentScript.getAttribute('path')\n  const input = $('.search-input')\n  const history = $('.search-history')\n  const history_list = $('.search-history-list')\n  const clear = $('.search-history-clear')\n  const result = $('.search-result')\n  const storage = JSON.parse(localStorage.getItem('search-history') || '[]').reverse()\n\n  // clear search history\n  clear.addEventListener('click', () => {\n    localStorage.setItem('search-history', '[]')\n    storage.length = 0\n    history_list.innerHTML = ''\n    history.style = ''\n  })\n\n  // gnerate search history\n  const history_list_cdf = document.createDocumentFragment()\n  storage.forEach((history_item) => {\n    const item = document.createElement('div')\n    item.className = 'search-history-item'\n    item.innerText = history_item\n    item.addEventListener('click', () => {\n      input.value = history_item\n      input.dispatchEvent(new Event('input'))\n    })\n    history_list_cdf.appendChild(item)\n  })\n  history_list.appendChild(history_list_cdf)\n\n  const response = await fetch(path)\n  const datas = (await response.json()).map((item) => {\n    item.content = ZLStringDecompress(item.content)\n    return item\n  })\n\n  input.addEventListener('input', () => {\n    const value = input.value.trim()\n    var keywords = value.split(/[\\s\\-]+/)\n\n    // Saving performance\n    result.innerHTML = ''\n    const cdf = document.createDocumentFragment()\n    const ul = document.createElement('ul')\n    ul.className = 'search-result-list'\n    cdf.appendChild(ul)\n\n    if (!value.length) return\n\n    // local searching\n    datas.forEach((data) => {\n      var isMatch = true\n      if (!data.title) data.title = 'No Title'\n\n      var dataTitle = data.title.trim()\n      var dataContent = data.content\n        .trim()\n        .replace(/<[^>]+>/g, '')\n        .toLowerCase()\n      var dataUrl = data.url.startsWith('/') ? data.url : '/' + data.url\n      var indexTitle = -1\n      var indexContent = -1\n      var firstOccur = -1\n      // only match artiles with not empty contents\n      if (dataContent) {\n        keywords.forEach(function (keyword, i) {\n          indexTitle = dataTitle.indexOf(keyword)\n          indexContent = dataContent.indexOf(keyword)\n\n          if (indexTitle < 0 && indexContent < 0) {\n            isMatch = false\n          } else {\n            if (indexContent < 0) indexContent = 0\n            if (i == 0) firstOccur = indexContent\n          }\n        })\n      } else {\n        isMatch = false\n      }\n      // show search results\n      if (isMatch) {\n        var content = data.content.trim().replace(/<[^>]+>/g, '')\n        if (firstOccur >= 0) {\n          // cut out 100 characters\n          var start = firstOccur - 20\n          var end = firstOccur + 80\n          if (start < 0) start = 0\n          if (start == 0) end = 100\n          if (end > content.length) end = content.length\n          var matchContent = content.substring(start, end)\n\n          // highlight all keywords\n          keywords.forEach((keyword) => {\n            const reg = new RegExp(`(${keyword})`, 'gi')\n            const key = '<span class=\"search-keyword\">$1</span>'\n            matchContent = matchContent.replace(reg, key)\n            dataTitle = dataTitle.replace(reg, key)\n          })\n          const li = document.createElement('li')\n          const a = document.createElement('a')\n          const p = document.createElement('p')\n          a.href = dataUrl\n          a.className = 'search-result-title'\n          a.innerHTML = dataTitle\n\n          // save search history\n          a.addEventListener('click', () => {\n            const value = input.value\n            if (!storage.includes(value)) storage.push(value)\n            localStorage.setItem('search-history', JSON.stringify(storage))\n          })\n\n          p.className = 'search-abstract'\n          p.innerHTML = matchContent + '...'\n          li.appendChild(a)\n          li.appendChild(p)\n          ul.appendChild(li)\n        }\n      }\n    })\n\n    result.appendChild(cdf)\n  })\n\n  function ZLStringDecompress(compressed) {\n    const f = String.fromCharCode\n    const length = compressed.length\n    const resetValue = 32768\n    if (!compressed) return ''\n    var dictionary = [],\n      enlargeIn = 4,\n      dictSize = 4,\n      numBits = 3,\n      entry = '',\n      result = [],\n      i,\n      w,\n      bits,\n      resb,\n      maxpower,\n      power,\n      c,\n      data = { val: compressed.charCodeAt(0), position: resetValue, index: 1 }\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i\n    }\n\n    bits = 0\n    maxpower = Math.pow(2, 2)\n    power = 1\n    while (power != maxpower) {\n      resb = data.val & data.position\n      data.position >>= 1\n      if (data.position == 0) {\n        data.position = resetValue\n        data.val = compressed.charCodeAt(data.index++)\n      }\n      bits |= (resb > 0 ? 1 : 0) * power\n      power <<= 1\n    }\n\n    switch ((next = bits)) {\n      case 0:\n        bits = 0\n        maxpower = Math.pow(2, 8)\n        power = 1\n        while (power != maxpower) {\n          resb = data.val & data.position\n          data.position >>= 1\n          if (data.position == 0) {\n            data.position = resetValue\n            data.val = compressed.charCodeAt(data.index++)\n          }\n          bits |= (resb > 0 ? 1 : 0) * power\n          power <<= 1\n        }\n        c = f(bits)\n        break\n      case 1:\n        bits = 0\n        maxpower = Math.pow(2, 16)\n        power = 1\n        while (power != maxpower) {\n          resb = data.val & data.position\n          data.position >>= 1\n          if (data.position == 0) {\n            data.position = resetValue\n            data.val = compressed.charCodeAt(data.index++)\n          }\n          bits |= (resb > 0 ? 1 : 0) * power\n          power <<= 1\n        }\n        c = f(bits)\n        break\n      case 2:\n        return ''\n    }\n    dictionary[3] = c\n    w = c\n    result.push(c)\n    while (true) {\n      if (data.index > length) {\n        return ''\n      }\n\n      bits = 0\n      maxpower = Math.pow(2, numBits)\n      power = 1\n      while (power != maxpower) {\n        resb = data.val & data.position\n        data.position >>= 1\n        if (data.position == 0) {\n          data.position = resetValue\n          data.val = compressed.charCodeAt(data.index++)\n        }\n        bits |= (resb > 0 ? 1 : 0) * power\n        power <<= 1\n      }\n\n      switch ((c = bits)) {\n        case 0:\n          bits = 0\n          maxpower = Math.pow(2, 8)\n          power = 1\n          while (power != maxpower) {\n            resb = data.val & data.position\n            data.position >>= 1\n            if (data.position == 0) {\n              data.position = resetValue\n              data.val = compressed.charCodeAt(data.index++)\n            }\n            bits |= (resb > 0 ? 1 : 0) * power\n            power <<= 1\n          }\n\n          dictionary[dictSize++] = f(bits)\n          c = dictSize - 1\n          enlargeIn--\n          break\n        case 1:\n          bits = 0\n          maxpower = Math.pow(2, 16)\n          power = 1\n          while (power != maxpower) {\n            resb = data.val & data.position\n            data.position >>= 1\n            if (data.position == 0) {\n              data.position = resetValue\n              data.val = compressed.charCodeAt(data.index++)\n            }\n            bits |= (resb > 0 ? 1 : 0) * power\n            power <<= 1\n          }\n          dictionary[dictSize++] = f(bits)\n          c = dictSize - 1\n          enlargeIn--\n          break\n        case 2:\n          return result.join('')\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits)\n        numBits++\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c]\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0)\n        } else {\n          return null\n        }\n      }\n      result.push(entry)\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0)\n      enlargeIn--\n\n      w = entry\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits)\n        numBits++\n      }\n    }\n  }\n})()\n"],"mappings":"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"}