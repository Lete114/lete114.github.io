{"version":3,"names":["codeBlockCopy","page","document","querySelector","addEventListener","event","target","classList","contains","table","parentElement","nextElementSibling","tagName","code","selection","window","getSelection","selectAllChildren","navigator","clipboard","writeText","toString","execCommand","removeAllRanges","innerText","setTimeout","imageLazyLoad","observer","IntersectionObserver","entries","forEach","entry","intersectionRatio","isIntersecting","image","src","getAttribute","setAttribute","removeAttribute","loadImages","unobserve","rootMargin","querySelectorAll","observe"],"sources":["main.js.map"],"sourcesContent":["!(() => {\n  document.addEventListener('DOMContentLoaded', function () {\n    codeBlockCopy()\n    imageLazyLoad()\n  })\n})()\n\nfunction codeBlockCopy() {\n  const page = document.querySelector('.page')\n  if (page) {\n    page.addEventListener('click', (event) => {\n      const target = event.target\n      if (!target.classList.contains('copy-code')) return\n      const table = target.parentElement.nextElementSibling\n      if (table.tagName === 'TABLE') {\n        const code = table.querySelector('.code')\n        const selection = window.getSelection()\n        selection.selectAllChildren(code)\n        navigator.clipboard ? navigator.clipboard.writeText(selection.toString()) : document.execCommand('copy')\n        selection.removeAllRanges()\n        target.innerText = 'COPIED'\n        setTimeout(function () {\n          target.innerText = 'COPY'\n        }, 2000)\n      }\n    })\n  }\n}\n\nfunction imageLazyLoad() {\n  /**\n   * @type { IntersectionObserverInit  }\n   */\n  const options = {\n    rootMargin: '10%'\n  }\n\n  const observer = new IntersectionObserver(callback, options)\n\n  document.querySelectorAll('img[data-src]').forEach((/** @type { HTMLImageElement } */ image) => {\n    observer.observe(image)\n  })\n\n  /**\n   * @param { IntersectionObserverEntry[] } entries\n   * @param { IntersectionObserver } observer\n   */\n  function callback(entries, observer) {\n    entries.forEach((entry) => {\n      if (entry.intersectionRatio > 0 || entry.isIntersecting) {\n        loadImages(entry.target)\n        observer.unobserve(entry.target)\n      }\n    })\n  }\n\n  /**\n   * @param { HTMLImageElement } image\n   */\n  function loadImages(image) {\n    const src = image.getAttribute('data-src')\n    image.setAttribute('src', src)\n    image.removeAttribute('data-src')\n  }\n}\n"],"mappings":"AAOA,SAASA,gBACP,MAAMC,EAAOC,SAASC,cAAc,SAChCF,GACFA,EAAKG,iBAAiB,SAAUC,IAC9B,MAAMC,EAASD,EAAMC,OACrB,IAAKA,EAAOC,UAAUC,SAAS,aAAc,OAC7C,MAAMC,EAAQH,EAAOI,cAAcC,mBACnC,GAAsB,UAAlBF,EAAMG,QAAqB,CAC7B,MAAMC,EAAOJ,EAAMN,cAAc,SAC3BW,EAAYC,OAAOC,eACzBF,EAAUG,kBAAkBJ,GAC5BK,UAAUC,UAAYD,UAAUC,UAAUC,UAAUN,EAAUO,YAAcnB,SAASoB,YAAY,QACjGR,EAAUS,kBACVjB,EAAOkB,UAAY,SACnBC,YAAW,WACTnB,EAAOkB,UAAY,MACrB,GAAG,IACL,IAGN,CAEA,SAASE,gBAIP,MAIMC,EAAW,IAAIC,sBAUrB,SAAkBC,EAASF,GACzBE,EAAQC,SAASC,KACXA,EAAMC,kBAAoB,GAAKD,EAAME,mBAU7C,SAAoBC,GAClB,MAAMC,EAAMD,EAAME,aAAa,YAC/BF,EAAMG,aAAa,MAAOF,GAC1BD,EAAMI,gBAAgB,WACxB,CAbMC,CAAWR,EAAMzB,QACjBqB,EAASa,UAAUT,EAAMzB,QAC3B,GAEJ,GArBgB,CACdmC,WAAY,QAKdvC,SAASwC,iBAAiB,iBAAiBZ,SAA2CI,IACpFP,EAASgB,QAAQT,EAAK,GAwB1B,CA/DEhC,SAASE,iBAAiB,oBAAoB,WAC5CJ,gBACA0B,eACF"}